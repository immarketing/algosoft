
create view forGrouping
as
select *
from plan_tbl,
     obj_tbl,
     obj_tbl subobj_tbl
where ((
  2 == obj_tbl.stage and
  2 == subobj_tbl.stage and
  obj_tbl.obj == subobj_tbl.node
))
;


procedure doGroupData;
begin
  //=СУММ(R[1]C;R[3]C;R[5]C)
  forGrouping._loop obj_tbl{
    var sumFrm : String;

    sumFrm := '0';

    var isGroup : boolean;
    isGroup := false;

    forGrouping._loop subobj_tbl {
      var razn : word;
      isGroup := true;

      razn := forGrouping.subobj_tbl.printedAt - forGrouping.obj_tbl.printedAt;

      sumFrm := sumFrm + ';R[' + razn +']C';
    }

    if isGroup then {
      sumFrm := '=СУММ(' + sumFrm + ')';

      xlSetCellFormula (sumFrm, forGrouping.obj_tbl.printedAt, 4, forGrouping.obj_tbl.printedAt,5 );
      xlSetCellFormula (sumFrm, forGrouping.obj_tbl.printedAt, 10, forGrouping.obj_tbl.printedAt,11 );
      xlSetCellFormula (sumFrm, forGrouping.obj_tbl.printedAt, 14, forGrouping.obj_tbl.printedAt,17 );
      xlSetCellFormula (sumFrm, forGrouping.obj_tbl.printedAt, 20, forGrouping.obj_tbl.printedAt,23 );
      xlSetCellFormula (sumFrm, forGrouping.obj_tbl.printedAt, 26, forGrouping.obj_tbl.printedAt,29 );
      xlSetCellFormula (sumFrm, forGrouping.obj_tbl.printedAt, 32, forGrouping.obj_tbl.printedAt,35 );
    }
  }
end;

create view forHeir
var
  wKAU : word;

  anNRec : comp;
  cObj   : comp;
as
select *
from spkau spkauordered(SPKAU02),
     obj_tbl obj_tbl_srch,
     plan_tbl plan_tbl_calcul,
     obj_tbl  obj_tbl_calcul,
     plan_tbl plan_tbl_calc2,
     obj_tbl
where ((

wKAU == spkauordered.KODGRKAU (noindex) and

2 == obj_tbl_srch.stage (noindex) and
anNRec == obj_tbl_srch.sootAnNRec (noindex) and

0 == plan_tbl_calcul.stage (noindex) and
plan_tbl_calcul.obj == obj_tbl_calcul.obj (noindex) and
0 == obj_tbl_calcul.stage (noindex) and

2 == plan_tbl_calc2.stage (noindex) and
cObj == plan_tbl_calc2.obj (noindex)

))
;

procedure CalcHierarhy;
begin
  forHeir._loop plan_tbl_calcul {
    if (forHeir.getFirst obj_tbl_calcul <> tsOK) {
      continue;
    }
    var localobj : comp;
    localobj := forHeir.obj_tbl_calcul.sootAnNRec;

    if (getFirst plan_tbl where ((
      2 == stage and
      forHeir.plan_tbl_calcul.col == plan_tbl.col and
      forHeir.plan_tbl_calcul.per == plan_tbl.per and
      localobj == plan_tbl.obj
      )) = tsOK) {

      update current plan_tbl set plan_tbl.base_val := plan_tbl.base_val + forHeir.plan_tbl_calcul.base_val,
                                  plan_tbl.plan_val := plan_tbl.plan_val + forHeir.plan_tbl_calcul.plan_val,
                                  plan_tbl.fact_val := plan_tbl.fact_val + forHeir.plan_tbl_calcul.fact_val,
                                  plan_tbl.stage := 2
                                  ;
    } else {
      insert plan_tbl set plan_tbl.base_val := forHeir.plan_tbl_calcul.base_val,
                          plan_tbl.plan_val := forHeir.plan_tbl_calcul.plan_val,
                          plan_tbl.fact_val := forHeir.plan_tbl_calcul.fact_val,
                          plan_tbl.stage := 2,
                          plan_tbl.col   := forHeir.plan_tbl_calcul.col,
                          plan_tbl.per   := forHeir.plan_tbl_calcul.per,
                          plan_tbl.obj   := localobj
                          ;
      update current plan_tbl set
                      plan_tbl.base_val := forHeir.plan_tbl_calcul.base_val,
                      plan_tbl.plan_val := forHeir.plan_tbl_calcul.plan_val,
                      plan_tbl.fact_val := forHeir.plan_tbl_calcul.fact_val,
                      plan_tbl.stage := 2,
                      plan_tbl.col   := forHeir.plan_tbl_calcul.col,
                      plan_tbl.per   := forHeir.plan_tbl_calcul.per,
                      plan_tbl.obj   := localobj
                      ;
    }
  }
end;


procedure CreateHierarhy (const wKAU : word);
begin
  set forHeir.wKAU := wKAU;

  forHeir._loop spkauordered{
    var srtCode : String;
    set forHeir.anNRec := forHeir.spkauordered.CNode;
    if (forHeir.getFirst obj_tbl_srch = tsOK){
      srtCode := forHeir.obj_tbl_srch.SortingCode + forHeir.spkauordered.LEVELCODE;
    } else {
      srtCode := forHeir.spkauordered.LEVELCODE;
    }

    insert obj_tbl set
           obj_tbl.code := forHeir.spkauordered.Code,
           obj_tbl.sootAnCode := forHeir.spkauordered.Code,
           obj_tbl.abbr := forHeir.spkauordered.Code,
           obj_tbl.name := forHeir.spkauordered.name,
           obj_tbl.SortingCode := srtCode,
           obj_tbl.sootAnName := forHeir.spkauordered.name,
           obj_tbl.sootAnNRec := forHeir.spkauordered.nrec,
           obj_tbl.obj := forHeir.spkauordered.nrec,
           obj_tbl.node := forHeir.spkauordered.cnode,
           obj_tbl.anNode := forHeir.spkauordered.Cnode,
           //obj_tbl.stage := 2,
           obj_tbl.sootAn := forHeir.spkauordered.KODGRKAU
           ;
    update current obj_tbl set obj_tbl.stage := 2;
  }

  update obj_tbl
  where (( 2 == obj_tbl.Stage))
  set obj_tbl.SortingCode := padch(obj_tbl.SortingCode,'0',200)
  ;
end;

create view gCol
var
  cArticle : word;

  cArtNRec : comp;
as
select *
from UKSARTICLE ,
     UKSARTICLE curArt,
     UKSARTICLE superUKSARTICLE,

     UKSARTICLE underUKSARTICLE
where ((
cArticle == UKSARTICLE.iArticle and

cArtNRec == curArt.nrec and
curArt.CNODE == superUKSARTICLE.nRec and

curArt.nRec == underUKSARTICLE.cNode
))
;


/* Определение номера колонки */
function get_col2(article: word): word;
begin
  result := 0; // мощность
  if (article = 1) {
    result := 5; // мощность
  } else {

    set gCol.cArticle := article;
    if (gCol.getFirst UKSARTICLE <> tsOk ) {
      exit;
    }

    var a : comp;

    set a := gCol.UKSARTICLE.nrec;

    set gCol.cArtNRec := a;

    if (getFirst fpPeriod = tsOK) {
      if CalcDaysBetweenDates (fpPeriod.DBEG,fpPeriod.DEND, false) > 32 then exit;
    }

    if (gCol.getFirst curArt = tsOk ) {
      if (gCol.getFirst underUKSARTICLE = tsOk ) {
        // это - группа. Пропускаем
        if 1=1 or (gCol.curArt.cNode <> 0) then {
          update current plan_tblDbg set plan_tblDbg.isGroup := 1;
          exit;
        }
        update current plan_tblDbg set plan_tblDbg.isGroup := 0;
      }
    }

    do {
      set gCol.cArtNRec := a;
      if (gCol.getFirst curArt <> tsOk ) {
        exit;
      }
      a := gCol.curArt.cNode;
    } while (gCol.curArt.cNode <> 0);

    result := gCol.curArt.iarticle - 1;

    update current plan_tblDbg set plan_tblDbg.topArticle := gCol.curArt.iarticle;


    if (result > 3) result := 0; // расшифровка статей не нужна


    if ((rep_mode = 1) and (result = 1)) result := 0; // остаток для факта не нужен

    update current plan_tblDbg set plan_tblDbg.col := result;
  }
end;


/* Запись данных во временную таблицу */
procedure write_tbl2(

                      obj_link,        // объект
                      node_link: comp; // "старший" объект
                      obj_name,        // наим. объекта
                      obj_abbr,        // аббр. объекта
                      pwr_unit: string;// ед изм мощности
                      value: double;   // значение из плана
                      PassNo : byte // Номер прохода. За 1 проход пишутся данные "план", за 2 - факт
                    );
var
  col_no, per_no, i: word;
  new_val: double;
begin
  //if (month(repPeriod.dBeg) > month(fpPeriod.dBeg))
  col_no := get_col2(planvalue.iArticle);
  if (col_no > 0) and (fptper.edizm = 2) {
    per_no := month(fpPeriod.dBeg) - 1;
    if (rep_mode = 1) {  // для отчета ПЛАН-ФАКТ
      per_no := 12;
      if (fpPeriod.Nrec = repPeriod.Nrec) per_no := 0;     // тек. месяц
      if (month(repPeriod.dBeg) > month(fpPeriod.dBeg)) {
        per_no := 2;                                       // тек. год
        if (fpPeriod.cNode = repPeriod.cNode) per_no := 1; // тек. квартал
      }
    }
    if (per_no > 11) exit;
    new_val := value;
    if (col_no < 5) new_val := new_val / koef;
    if (getfirst obj_tbl where ((obj_link == obj)) <> tsOk) {
      //tmp := get_code(node_link, volume);
      insert obj_tbl
         set //code = tmp,
             obj = obj_link,
             //node = node_link,
             //vol = volume,
             name = obj_name,
             //abbr = obj_abbr,
             unit = locase(pwr_unit)
             ;
    }
    if (getfirst plan_tbl where ((obj_link == obj and col_no == col and per_no == per)) <> tsOk) {
      insert plan_tbl set obj = obj_link, col = col_no, per = per_no;

      update current plan_tblDbg
                 set plan_tblDbg.obj := obj_link,
                     plan_tblDbg.col := col_no,
                     plan_tblDbg.per := per_no

                     ;
    }

    if (rep_mode = 0) OR ((rep_mode = 1) and (PassNo = 1)) {
      if (planValue.iRegister = word(cgPlan+cgUse)) {
        update current plan_tbl set plan_tbl.plan_val = plan_tbl.plan_val + new_val;

        update current plan_tblDbg
                   set plan_tblDbg.plan_val := new_val

                       ;
      }
    }

    if (rep_mode = 0) OR ((rep_mode = 1) and (PassNo = 3)) {
      if (planValue.iRegister = word(cgPlan+cgUse)) {
        update current plan_tbl set plan_tbl.base_val = plan_tbl.base_val + new_val;

        update current plan_tblDbg
                   set plan_tblDbg.base_val := new_val

                       ;
      }
    }

    if (rep_mode = 0) OR ((rep_mode = 1) and (PassNo = 2)) {
      if (planValue.iRegister = word(cgFact+cgUse)) {
        update current plan_tbl set plan_tbl.fact_val = plan_tbl.fact_val + new_val;

        update current plan_tblDbg
                   set plan_tblDbg.fact_val := new_val

                       ;
      }
    }

    if (rep_mode = 1) for (i := per_no + 1; i < 3; i := i + 1) { // для отчета ПЛАН-ФАКТ
      if (getfirst plan_tbl where ((obj_link == obj and col_no == col and i == per)) <> tsOk) {
        insert plan_tbl set obj = obj_link, col = col_no, per = i;
      }
      if (PassNo = 1) {
        if (planValue.iRegister = word(cgPlan+cgUse)) {
          update current plan_tbl set plan_tbl.plan_val = plan_tbl.plan_val + new_val;
        }
      }

      if (PassNo = 2) {
        if (planValue.iRegister = word(cgFact+cgUse)) {
          update current plan_tbl set plan_tbl.fact_val = plan_tbl.fact_val + new_val;
        }
      }

      if (PassNo = 3) {
        if (planValue.iRegister = word(cgPlan+cgUse)) {
          update current plan_tbl set plan_tbl.base_val = plan_tbl.base_val + new_val;
        }
      }
    }
  }
end;

/* Определение уровня иерархии объекта строительства - только для контроля ТПИР/КР */
function get_vol2(obj_link: comp): word;
var
  up_rec: comp;
begin
  result := 0;
  if (getfirst prg_tbl where ((obj_link == prg_tbl.nrec)) = tsOk) {
    up_rec := prg_tbl.cstroy;
    while (up_rec > 0) {
      if (getfirst prg_tbl where ((up_rec == prg_tbl.nrec)) <> tsOk) break;
      up_rec := prg_tbl.cstroy;
      result := result + 1;
    }
    /*
    // отключил эту проверку.
    if (rep_type = 0) and not (prg_tbl.code = '03' or prg_tbl.code = '05') result := 0; // не ТПиР ( ТПиР == 03)
    if (rep_type = 1) and (prg_tbl.code <> '02') result := 0; // не КР   ( ТПиР == 02)
    */
  }
end;


// собственно, формирование отчета
procedure calc_plan2 (
                      PassNo : byte // Номер прохода. За 1 проход пишутся данные "план", за 2 - факт, за 3 - план. утвержд.
                      );
var
  volume: word;
  up_rec: comp;
begin
  if ( PassNo = 1 ) {
    delete all plan_tbl;
    delete all obj_tbl;
  }

  // SPPLAN.COBJECT

  startnewvisual(vtRotateVisual, vfTimer+vfBreak, '', 0);
  setvisualtitle('Обработка спецификации плана');
 _loop spplan {
    if (not nextvisual) break;
    setvisualheader('Обрабатываю объект ''' + katstroy.code + '''...');
    //up_rec := katstroy.cstroy;
    volume := get_vol2(katstroy.nrec);  // определение "уровня" объекта
    if (volume > 0)  { // если объект - "наш"
      //if (getfirst prg_tbl where ((up_rec == prg_tbl.nrec)) <> tsOk) break;
      //volume := volume - 1;
      // if (volume < 4)
     _loop planvalue
        if (planvalue.iPrice = price_mode + 1) or
           (planvalue.iArticle = 1) { // Мощность

           insert plan_tblDbg
              set plan_tblDbg.obj    := spplan.cObject,
                  plan_tblDbg.name   := spplan.name,
                  plan_tblDbg.iArticle    := planvalue.iArticle,
                  plan_tblDbg.pvNRec    := planvalue.nRec,
                  plan_tblDbg.vlu    := planvalue.fValue,
                  plan_tblDbg.PassNo := PassNo,
                  plan_tblDbg.cPer    := planValue.cPeriod,
                  plan_tblDbg.perName := fpPeriod.name,
                  plan_tblDbg.iRegister := planValue.iRegister
                  ;

          write_tbl2(
                     spplan.cObject,
                     prg_tbl.cstroy,
                     spplan.name,
                     prg_tbl.abbr,
                     kated.abbr,
                     planvalue.fValue,
                     PassNo
                     );
        }
      //up_rec := prg_tbl.cstroy;
    } ;
  }
  stopvisual('', 0);
end;

/* Добавление новой строки в EXCEL */
// obj_tblOrdered
procedure add_string2(row_no, type: word);
var
  i, x: word;
begin
  case type of
    xlObject: {
      tmp := unit;
      //if (obj_tblOrdered.vol > 1) {

      xlSetCellStringValue(obj_tblOrdered.abbr, row_no, 1, row_no, 1);
      xlSetCellStringValue(obj_tblOrdered.name, row_no, 2, row_no, 2);
      fill_formula(row_no);

      //}
    }
    xlPower: {
      tmp := obj_tblOrdered.unit;
    }
    xlTotal: {
      tmp := unit + '/ ' + tmp;
// Формула расчета удельной мощности
      if (rep_mode = 0)
        for (i := 0; i < 12; i := i + 1) {
          x := i div 3 + i;
          x :=  x * 4 + 9;
          xlSetCellFormula('=ЕСЛИ(R[-1]C > 0;R[-2]C/R[-1]C*100; 0)', row_no, x, row_no, x);
          xlSetCellFormula('=ЕСЛИ(R[-1]C > 0;R[-2]C/R[-1]C*100; 0)', row_no, x + 1, row_no, x + 1);
        }
      else
        for (i := 0; i < 6; i := i + 1) {
          x := 4 + 6 * i;
          xlSetCellFormula('=ЕСЛИ(R[-1]C > 0;R[-2]C/R[-1]C*100; 0)', row_no, x, row_no, x);
          xlSetCellFormula('=ЕСЛИ(R[-1]C > 0;R[-2]C/R[-1]C*100; 0)', row_no, x + 1, row_no, x + 1);
        }
    }
  end;
  xlSetCellStringValue(tmp, row_no, 3, row_no, 3);

  update plan_tbl where (( plan_tblOrdered.nRec == plan_tbl.nRec )) set printedAt := row_no;
end;


// вывод данных в EXCEL
procedure xl_fill2;
var
  x, y: longint;
  col_no: word;
  power_string: boolean;
begin
  if (getfirst obj_tblOrdered <> tsOk) {
    message('Нет данных для формирования отчета', mfWarning + OkButton);
    exit;
  }
  if (not xl_init(xlt_file)) {
    xl_done;
    message('Не найден файл шаблона'+chr(13)+'"'+xlt_file+'"', mfWarning + OkButton);
    exit;
  }
  if (not fill_head) {
    message('Ошибка записи в excel-файл', mfWarning + OkButton);
    exit;
  }
  //pushbounds(tb_by_obj_1);
  //AddBounds (tb_by_obj_2);
  //AddBounds (tb_by_obj);

  //SetOrder (ti_bySorted);

  y := 6 + rep_mode;
  power_string := false;
  do {
    if not nextvisual break;
    if power_string {
      y := y + 1;
      add_string2(y, xlTotal);
      power_string := false;
    }
    if (obj_tblOrdered.vol = 2) continue; // Пропускаем папки с годами
    y := y + 1;
    add_string2(y, xlObject);
    update obj_tbl where (( obj_tblOrdered.NRec == obj_tbl.NREc))
           set printedAt := y;
   _loop plan_tblOrdered {
      col_no := plan_tblOrdered.col;
      if (col_no = 5) {
        if (obj_tblOrdered.vol > 1) { // Пропускаем мощность для первого уровня
          col_no := 3; // Мощность пишем в ввод
          if not power_string {
            y := y + 1;
            add_string2(y, xlPower);
            power_string := true;
          }
        }
        else continue;
      }
      if (rep_mode = 0) {
        x := plan_tblOrdered.per div 3 + plan_tblOrdered.per;
        x := x * 4 + col_no + 7;
        xlSetCellNumberValue(plan_tblOrdered.plan_val, y, x, y, x);
      }
      else {
        x := 4 + (col_no - 2) * 6 + plan_tblOrdered.per * 12;
        if (x > 14) xlSetCellNumberValue(plan_tblOrdered.base_val, y, x - 2, y, x - 2);
        xlSetCellNumberValue(plan_tblOrdered.plan_val, y, x, y, x);
        xlSetCellNumberValue(plan_tblOrdered.fact_val, y, x + 1, y, x + 1);
      }
    } // loop plan_tbl
  } while (getnext obj_tblOrdered = tsOk);
    if power_string {
      y := y + 1;
      add_string2(y, xlTotal);
      power_string := false;
    }

  if (rep_mode = 1) {
    doGroupData;
  };
  xl_done;
end;
!--------------------------------------------------------------------------
! Формирование отчета
!--------------------------------------------------------------------------
function build_rep2: boolean;
begin
  build_rep2 := false;
  calc_plan2 (1);

  var locS : comp;

  locS := cPlanVar;
  if ( rep_mode = 1 )  {
    set cPlanVar := cPlanVarFact;
    calc_plan2 (2);
    set cPlanVar := cPlanVarUPlan;
    calc_plan2 (3);
  }

  set cPlanVar := locS;

  CorrectSootv;
  CreateHierarhy(analitWKAU);
  CalcHierarhy;
  xl_fill2;
  build_rep2 := true;
end;
