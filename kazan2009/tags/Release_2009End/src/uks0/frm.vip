
formUKSshowdebug menu
{
  - 'Показать отладочную информацию', cmShowDebug, 'Отладочная информация' ;
}


vipInterface form_8_15_5 licensed(free);


interface form_8_15_5 'Отчет по плану строительства 8.15 v.20091215' ('', , sci1EscTree), escclose, gray;
show at (,,,)

#include temp_tbl.vpp

var
  scale, price_mode, rep_type: word;
  tmp, unit: string;
  make_rep: boolean;
  koef: double;
  tcPlan, tcHier, tcVar, tcPer: comp;

create view v01
var cUksTree,
    cPlanVar,
    cPlanVarFact,
    cPlanVarUPlan,
    cNode: comp;
    rep_mode: word;
    xlt_file: string;
    sootvCode : String;
    analitWKAU  : word;
as select *
from uksTree,

     planVar, // план
     katVarPl,

     planVar planVarFact, // факт
     katVarPl katVarPlFact,

     planVar planVarUPlan, // утв. план
     katVarPl katVarPlUPlan,

     plStroy,
     spPlan,
     kated,
     katstroy,
     katstroy prg_tbl,
     katstroy plan_tree,
     planValue,
     fpPeriod,
     fpTper,

     plan_tbl,
     plan_tbl plan_tblOrdered ,

     obj_tbl (obj_tbl02),
     obj_tbl obj_tblOrdered(obj_tbl02),

     fpPeriod plPeriod,
     fpPeriod repPeriod (fpPeriod08),

     plan_tblDbg
where ((
      cUksTree                == uksTree.Nrec

  // вариант план
  and cPlanVar                == planVar.Nrec
  and planVar.cName           == katVarPl.Nrec

  // вариант утв. план
  and cPlanVarUPlan           == planVarUPlan.Nrec
  and planVarUPlan.cName      == katVarPlUPlan.Nrec

  // вариант факт
  and cPlanVarFact            == planVarFact.Nrec
  and planVarFact.cName       == katVarPlFact.Nrec

  and uksTree.cDataSource     == plStroy.Nrec

  and plStroy.cPeriod         == plPeriod.Nrec
  and comp(0064000000000017h) == repPeriod.cTper

  and cPlanVar                == spPlan.cPlanVar
  and cNode                   == spPlan.cNode
  and word(2101)              == spplan.wTable
  and word(0)                 == spplan.wKau

  /*
  and ( spplan.cObject=comp('0131000000000417h')
        //or        spplan.cObject=comp('00CD0000000002B1h')
        //or spplan.cObject=comp('00CD0000000002B2h')

        //or         spplan.cObject=comp('00CD0000000002AFh')
      ) */

  and spPlan.cObject          == katStroy.Nrec
  and katStroy.cEd            == katEd.Nrec

  and word(cgiSpPlan)         == planValue.iMode
  and spPlan.Nrec             == planValue.cRec
//  and word(cgPlan+cgUse)      == planValue.iRegister
//  and word(cgCurrent+cgTotal) == planValue.iPrice
//  and iArticle                == planValue.iArticle
  and planValue.cPeriod      /== fpPeriod.Nrec
  //and comp(0064000000000017h) == fpPeriod.cTper (noindex)

  and fpPeriod.cTper          == fpTper.Nrec

  and 2 == obj_tblOrdered.stage  (noindex)
  and obj_tblOrdered.obj == plan_tblOrdered.obj (noindex)
  and 2 == plan_tblOrdered.stage (noindex)
))

and (repPeriod.dBeg >= plPeriod.dBeg)
and (repPeriod.dEnd <= plPeriod.dEnd)

bounds _by_obj = obj_tbl.obj == plan_tbl.obj (noindex)
//bounds _by_obj_1 = 2 == obj_tbl.stage (noindex)
//bounds _by_obj_2 = 2 == plan_tbl.stage (noindex)

//order _bySorted by obj_tbl.SortingCode

! and
;


#include fnc.vpp
#include fnc.algo.vip
#include uks_windows.vpp

!--------------------------------------------------------------------------
! Выбор плана
!--------------------------------------------------------------------------
procedure pickPlan;
{
  var fcPlan, fcHier, fcVar : comp;
  fcPlan := plStroy.Nrec;
  fcHier := cUksTree;
  fcVar  := cPlanVar;
  if (runInterface('L_UksPlans::GetPlan',
                    word(cgiPick + cgiNotEdit), fcPlan, fcHier, fcVar) <> cmCancel) {
    set cUksTree := fcHier;
    set cPlanVar := fcVar;
    if (year(cur_date) = year(plPeriod.dBeg)) {
     _loop repPeriod {
        if (month(cur_date) = month(repPeriod.dBeg)) break;
      }
    }
    else if (getLast repPeriod <> tsOk)
      message('Нет периодов планирования, соответствующих выбранному плану!', mfWarning + OkButton);
  }
}
!--------------------------------------------------------------------------
! Выбор варианта плана
!--------------------------------------------------------------------------
procedure pickPlanVar;
{
  var fcVar : comp;
  fcVar  := cPlanVar;
  if runInterface('L_UksPlans::GetVarForPlan', cgiPick,
                  plStroy.Nrec, plStroy.cCO, plStroy.cPeriod, fcVar) <> cmCancel
    set cPlanVar  := fcVar;
}


!--------------------------------------------------------------------------
! Выбор варианта плана - факт
!--------------------------------------------------------------------------
procedure pickPlanVarFact;
{
  var fcVar : comp;
  fcVar  := cPlanVarFact;
  if runInterface('L_UksPlans::GetVarForPlan', cgiPick,
                  plStroy.Nrec, plStroy.cCO, plStroy.cPeriod, fcVar) <> cmCancel
    set cPlanVarFact  := fcVar;
}

!--------------------------------------------------------------------------
! Выбор варианта плана - утв. плана
!--------------------------------------------------------------------------
procedure pickPlanVarUPlan;
{
  var fcVar : comp;
  fcVar  := cPlanVarUPlan;
  if runInterface('L_UksPlans::GetVarForPlan', cgiPick,
                  plStroy.Nrec, plStroy.cCO, plStroy.cPeriod, fcVar) <> cmCancel
    set cPlanVarUPlan := fcVar;
}

!--------------------------------------------------------------------------
! Установка видимости полей
!--------------------------------------------------------------------------
procedure set_state;
{
  if (rep_mode = 0) {
    hideLabel4field(#repPeriod.name);
    clearFieldState(#repPeriod.name, sfVisible);
    xlt_file := translatepath('%StartPath%XLS\User_Reports\form615_.xlt')
  }
  else {
    setFieldState(#repPeriod.name, sfVisible);
    showLabel4field(#repPeriod.name);
    xlt_file := translatepath('%StartPath%XLS\User_Reports\form815_.xlt')
  }
}

!--------------------------------------------------------------------------
! Формирование отчета
!--------------------------------------------------------------------------
function build_rep: boolean;
begin
  build_rep := false;
  calc_plan (1);

  var locS : comp;

  locS := cPlanVar;
  if ( rep_mode = 1 )  {
    set cPlanVar := cPlanVarFact;

    //Message ('calc_plan (2)');

    calc_plan (2);
  }

  set cPlanVar := locS;

  CorrectSootv;

  xl_fill;

  build_rep := true;
end;

handleevent // interface
cmInit: {
  make_rep := false;
  runwindowmodal(param_win);

  /*
  if make_rep {
    make_rep := build_rep;
  }
  */
  abort;
}
end;
end.
