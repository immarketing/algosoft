#include ispbdsDet_extClass.vip

  procedure CheckDefValues;
  begin
    if (sPath='') set sPath := translatepath('%startpath%Xls\F_FPBUDGET\SZMN_Budjet\tmpl_ispbds.xls');
  end;

  procedure ReadDSK;
  begin
    var dc : boolean;

    dc := true;

    //if (not ReadMyDsk(sPath  ,'7dsksPath7',isError))  sPersons := 'o?iN???N ??a?N??N';
    if (not ReadMyDsk(cTForm ,'szmn_bud_FormIspBDSDet.cTForm',isError))  cTForm := 0;
    if (not ReadMyDsk(cPlan  ,'szmn_bud_FormIspBDSDet.cPlan',isError))  cPlan:=0;

    if (not ReadMyDsk(cFact  ,'szmn_bud_FormIspBDSDet.cFact',isError))  cFact:=0;
    if (not ReadMyDsk(sPath  ,'szmn_bud_FormIspBDSDet.sPath',isError))  sPath:='';
    if (not ReadMyDsk(cPeriod,'szmn_bud_FormIspBDSDet.cPeriod',isError))  cPeriod:=0;

    //

    ReadMyDsk (Check,    'szmn_bud_FormIspBDSDet.Check', dc);

    ReadMyDsk (extClName,   'szmn_bud_FormIspBDSDet.extClName', dc);

    ReadMyDsk (excCode1,    'szmn_bud_FormIspBDSDet.excCode1', dc);
    ReadMyDsk (excCode2,    'szmn_bud_FormIspBDSDet.excCode2', dc);
    ReadMyDsk (excCode3,    'szmn_bud_FormIspBDSDet.excCode3', dc);
    ReadMyDsk (excCode4,    'szmn_bud_FormIspBDSDet.excCode4', dc);
    ReadMyDsk (excCode5,    'szmn_bud_FormIspBDSDet.excCode5', dc);
    ReadMyDsk (excCode6,    'szmn_bud_FormIspBDSDet.excCode6', dc);


    CheckExtAttr;

    CheckDefValues;

  end;

  procedure StoreDSK;
  begin
    CheckDefValues;
    // szmn_bud_Form91

    //if (sPath='') set sPath := translatepath('%startpath%Xls\F_FPBUDGET\SZMN_Budjet\tmpl_7_9_1.xls');

    SaveMyDsk(cTForm,    'szmn_bud_FormIspBDSDet.cTForm');
    SaveMyDsk(cPeriod,   'szmn_bud_FormIspBDSDet.cPeriod');
    SaveMyDsk(cPlan,     'szmn_bud_FormIspBDSDet.cPlan');
    SaveMyDsk(cFact,     'szmn_bud_FormIspBDSDet.cFact');

    SaveMyDsk(sPath,     'szmn_bud_FormIspBDSDet.sPath');

    SaveMyDsk (Check,    'szmn_bud_FormIspBDSDet.Check' );

    CheckExtAttr;

    SaveMyDsk(extClName,   'szmn_bud_FormIspBDSDet.extClName');

    SaveMyDsk(excCode1,    'szmn_bud_FormIspBDSDet.excCode1');
    SaveMyDsk(excCode2,    'szmn_bud_FormIspBDSDet.excCode2');
    SaveMyDsk(excCode3,    'szmn_bud_FormIspBDSDet.excCode3');
    SaveMyDsk(excCode4,    'szmn_bud_FormIspBDSDet.excCode4');
    SaveMyDsk(excCode5,    'szmn_bud_FormIspBDSDet.excCode5');
    SaveMyDsk(excCode6,    'szmn_bud_FormIspBDSDet.excCode6');


  end;

  function trimFirst0 (st : String):string;
  begin
    if st = '' then {
      result := '';
      exit
    };
    if substr (st,1,1) = '0' then
      result := trimFirst0 (substr (st,2,255))
    else
      result := st;
  end;

  create view lvlnmb
  var
    cPos : comp
  as
  select *
    from fpSpAxtf spAx
   where ((
   cPos == spAx.nrec
   ))
   ;

  function getCurrentLevelNumber : word;
  begin

    result := 0;

    set lvlnmb.cPos := fpSpAxtf.nRec;
    do {
      if (lvlnmb.getfirst spAx = tsOK) {
        if (lvlnmb.spAx.cNode = 0) {
          exit;
        } else {
          inc (result);
          set lvlnmb.cPos := lvlnmb.spAx.cNode;
        }
      } else {
        exit;
      }
    } while true;
  end;

  procedure prepareData (pPeriod, pW1, pw2: comp);
  begin
    insert ispbds ( cStBud,
                    kodAn1,
                    kodAn2,
                    cPodr,
                    cDog,
                    cOborot,
                    podrName,
                    dogName,
                    summa[1],
                    summa[2],
                    summa[3]

                    )
    select CSTBUD,pW1,pw2, CANDOC[1], CANDOC[2], nrec,
           if(GetAnyKau(0, pW1, CANDOC[1]), GivenAnName(1), ''),
           if(GetAnyKau(0, pw2, CANDOC[2]), GivenAnName(1), ''),
           if (FPOborot.kodreg = 150, FPOborot.summa, 0),
           if (FPOborot.kodreg = 151, FPOborot.summa, 0),
           if (FPOborot.kodreg = 152, FPOborot.summa, 0)
      from FPOborot
     where ((
       pPeriod == CPERIOD (noindex) and
       pW1     == WANDOC[1] (noindex) and
       pW2     == WANDOC[2] (noindex)
     ))
     ignore_errors (tsDuplicateKey)
     ;

    insert ispbds ( cStBud,
                    kodAn1,
                    kodAn2,
                    cPodr,
                    cDog,
                    cOborot,
                    podrName,
                    dogName,
                    summa[1],
                    summa[2],
                    summa[3]
                    )
    select FPOborot.CSTBUD,pW1,pw2, hashan.canalit[1], hashan.canalit[2], FPOborot.nrec,
           if(GetAnyKau(0, pW1, hashan.canalit[1]), GivenAnName(1), ''),
           if(GetAnyKau(0, pw2, hashan.canalit[2]), GivenAnName(1), ''),
           if (FPOborot.kodreg = 150, FPOborot.summa, 0),
           if (FPOborot.kodreg = 151, FPOborot.summa, 0),
           if (FPOborot.kodreg = 152, FPOborot.summa, 0)

      from FPOborot, hashan , sloj, spsloj spsloj1, spsloj spsloj2
     where ((
       pPeriod == FPOborot.CPERIOD (noindex) and
       FPOborot.chashdoc /== hashan.nrec and
       hashan.csloj /== sloj.nrec and
       sloj.nrec /== spsloj1.cMain (noindex) and
       1         == spsloj1.NPP (noindex) AND
       pW1       == spsloj1.kodgrkau (noindex)and
       sloj.nrec /== spsloj2.cMain (noindex)and
       2         == spsloj2.NPP (noindex)AND
       pw2       == spsloj2.kodgrkau(noindex)
     ))
     ignore_errors (tsDuplicateKey)
     ;
    insert ispbdsGrouped
                  ( cStBud,
                    kodAn1,
                    kodAn2,
                    cPodr,
                    cDog,
                    podrName,
                    dogName

                    )
     select cStBud,
            kodAn1,
            kodAn2,
            cPodr,
            cDog,
            podrName,
            dogName from ispbds ignore_errors (tsDuplicateKey) ;


     _loop ispbdsGrouped {
       //
       var sm : array [1..3] of double;
       sm[1] := 0;
       sm[2] := 0;
       sm[3] := 0;
       _loop ispbdslinked {
           sm[1] := sm[1] + ispbdslinked.SUMMA[1];
           sm[2] := sm[2] + ispbdslinked.SUMMA[2];
           sm[3] := sm[3] + ispbdslinked.SUMMA[3];
       }
       update current ispbdsGrouped set ispbdsGrouped.summa[1] := sm[1],
                                 ispbdsGrouped.summa[2] := sm[2],
                                 ispbdsGrouped.summa[3] := sm[3] ;
     }
  end;

  procedure doValuesPrint(CopyBud:comp; FP:word; Nstr:word; Nstol:word; var vl : double);
  begin
    //xlSetCellNumberValue(0 , Nstr, Nstol , Nstr, Nstol );
    vl      := 0;

    Set cCopyBud:=CopyBud;
    Set cFP := FP;

    _loop fpBV {
      _LOOP  fpV {
        //if (getFirst fpP <> tsOK) {};
        //if ( fpPeriod.dBeg = fpP.dBeg ) and (fpPeriod.dEnd = fpP.dEnd)
        if ( fpV.cPeriod = cPeriod )
        //if((month(fpP.dbeg)=month(fpP.dEnd)) and (month(fpP.dbeg)=month(fpperiod.dbeg)) and (year(fpP.dbeg)=year(fpperiod.dbeg)))// and (fpvalues.chashan = 0))) //chek year
        {
          if(Check=0) {
            //xlSetCellNumberValue(fpv.summa     , Nstr, Nstol , Nstr, Nstol );
            vl := fpv.summa;
            //exit;
          } else {
            //xlSetCellNumberValue(fpv.summa/1000, Nstr, Nstol , Nstr, Nstol );
            vl := fpv.summa/1000;
            //exit;
          }
        }
        else{}
      }
    }
  end;

  procedure doPrintReport;
  begin
    StoreDSK;

    delete all ispbds;
    delete all printed;

    xlCreateExcelWithTemplate(sPath,true);

    //
    var dataSheetName : string;
    dataSheetName  := 'IspBDSData';

    var reportSheetName : string;
    reportSheetName  := 'IspBDS';

    xlRunMacro('setDataSheetName('+dataSheetName+')');
    xlRunMacro('setReportSheetName('+reportSheetName+')');
    xlRunMacro('setRowToFill('+String (7)+')');

    xlSetActiveSheetByName(dataSheetName);

    //xlSetCellStringValue(sPeriod, 3, 3, 3, 3); //

    if(Check=0) {
      xlSetCellStringValue('руб.', 3, 4, 3, 4); //
    } else {
      xlSetCellStringValue('тыс.руб.', 3, 4, 3, 4); //
    }
    // русский
    xlSetCellStringValue(LoCase (datetostr(fpperiod.dbeg, 'month YYYY')), 3, 3, 3, 3); //
    xlSetCellStringValue(LoCase (datetostr(fpperiod.dbeg, 'mon YYYY')), 3, 5, 3, 5); //
    xlSetCellStringValue(LoCase (datetostr(fpperiod.dbeg, 'mon')), 3, 6, 3, 6); //

    prepareData(cPeriod, 1 , 14 );

    var extCl : byte;
    var prntRow : byte;
    var prntRowStr : String;

    var extraChar : string;
    extraChar := '''';

    _LOOP  fpSpAxtf    {
      if (getFirst fpstbud = tsOK) {};
      if(isValid(tnfpstbud))       { //chek year
        //
        if ( fpSpAxtf.coTable = coFPSTBUD ) {
          extCl := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName );
        } else {
          extCl := 0;
        }
        case extCl of
          0: { prntRow := 9; prntRowStr := 'ROWORDINAL'; }
          1: { prntRow := 7; prntRowStr := 'ROWDELIM'; }
          2: { prntRow := 11; prntRowStr := 'ROWITOG'; }
          3: { prntRow := 13; prntRowStr := 'ROWAGGREG'; }
          4: continue;
        end;

        var vls : array [1..2] of double;
        vls[1] := 0;
        vls[2] := 0;

        set cStBud := fpSpAxtf.CMEAN;

        doValuesPrint (cPlan,150, 0,0,vls[1]);
        doValuesPrint (cFact,151, 0,0,vls[2]);

        xlSetCellStringValue(PadCh ('',' ', 2 * getCurrentLevelNumber) + fpstbud.Name, prntRow, 2, prntRow, 2); //

        if ( extCl <> 1) {
          xlSetCellStringValue(extraChar + trimFirst0(fpstbud.LevelCode), prntRow, 1, prntRow, 1 ); //
          //xlSetCellStringValue(kated.name, 1+tt, 27, 1+tt, 27);
          //ExcelPrint2(cPlan,150,prntRow,3);
          //ExcelPrint2(cPlanDop,150,prntRow,4);
          //ExcelPrint2(cFact,151,prntRow,5);
          xlSetCellNumberValue(vls[1]     , prntRow, 4, prntRow, 4);
          xlSetCellNumberValue(vls[2]     , prntRow, 5, prntRow, 5);
        };
        xlRunMacro('CopyRow(' + prntRowStr + ')');

        insert printed set printed.crec     := fpSpAxtf.nRec,
                           printed.name     := PadCh ('',' ',2 * getCurrentLevelNumber) + fpstbud.Name,
                           printed.values[1]:= vls[1],
                           printed.values[2]:= vls[2]
                           ;
        var lastVals : array [1..2] of comp;

        lastVals[1] = 0;
        lastVals[2] = 0;

        prntRow    := 15;
        prntRowStr := 'ROWDETAL'
        _loop ispbdsOrdered {
          //xlSetCellStringValue(extraChar + trimFirst0(fpstbud.LevelCode), prntRow, 1, prntRow, 1 ); //
          xlSetCellStringValue(PadCh ('',' ', 2 * getCurrentLevelNumber + 2) + ispbdsOrdered.podrName + '|' + ispbdsOrdered.dogName , prntRow, 2, prntRow, 2); //
          vls[1] := 0;
          vls[2] := 0;

          if(Check=0) {
            //xlSetCellNumberValue(fpv.summa     , Nstr, Nstol , Nstr, Nstol );
            vls[1] := ispbdsOrdered.summa[1];
            vls[2] := ispbdsOrdered.summa[2];
          } else {
            //xlSetCellNumberValue(fpv.summa/1000, Nstr, Nstol , Nstr, Nstol );
            vls[1] := ispbdsOrdered.summa[1]/1000;
            vls[2] := ispbdsOrdered.summa[2]/1000;
          }
          xlSetCellNumberValue( vls[1]    , prntRow, 4, prntRow, 4);
          xlSetCellNumberValue( vls[2]    , prntRow, 5, prntRow, 5);
          xlRunMacro('CopyRow(' + prntRowStr + ')');
        }
      }
      else{}
    }
    //xlRunMacro('ROWEMPTY');
    //printSigners2 (25);

    //printExecutor2(28);
    xlKillExcel;


  end;

