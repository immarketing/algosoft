
#include Getkau.vih


#include podpis.vih


#ifdef  ComponentVersion
#component "SZMN_COMMON"
#endif //ComponentVersion

/*
VipInterface vPodpis implements IPodpis

#Licensed_Free
; // VipInterface vPodpis

public:
  //constructor initByName(nm : String);
  procedure IPodpis.SetPrefix(prefix : String);
end;
*/

interface vPodpis;
  create view 
  var 
    sPrefix : string;
    vwKODGRKAU  : word;
    cPodpGrp    : comp;
    
  as 
  select * 
    from 
         spKAU spKAUPodp (SPKAU07),
         spKAU
   where ((
     root == spKAUPodp.nRec and 
     vwKODGRKAU == spKAUPodp.KODGRKAU and 
     cPodpGrp   == spKAUPodp.cNode (noindex) 
     and cPodpGrp   == spKAU.nrec 
   ))
   ;
  
  
  function getDolj : String;
  begin
    var lsname : string;
    
    lsname := spKAUPodp.name;
    var b : byte;
    
    b := pos ('|', lsname);
    
    var ar : array [1..2] of string;
    ar[1] := substr (lsname, 1, b-1);
    ar[2] := substr (lsname, b+1, 255);
    result := ar[1];
  end;
  
  function getFIO : String ;
  begin
    var lsname : string;
    
    lsname := spKAUPodp.name;
    var b : byte;
    
    b := pos ('|', lsname);
    
    var ar : array [1..2] of string;
    ar[1] := substr (lsname, 1, b-1);
    ar[2] := substr (lsname, b+1, 255);
    result := ar[2];
  end;

  procedure SetPrefix(prefix : String);
  begin
    //Message ('Setting prefix '#13 + prefix);
    sPrefix := prefix;
  end;
  
  function  IsSelected: boolean;
  begin
    result := cPodpGrp <> 0;
  end;
  
  function getDialogFieldString : String;
  begin
    if (cPodpGrp = 0) then {
      result := 'Выберите подписывающих лиц';
    } else {
      result := spKAU.Name;
    }
  end;
  
  procedure savedsk;
  begin
    SaveMyDsk (cPodpGrp,sPrefix+'.cPodpGrp' );
  end;
  
  procedure ReadDsk;
  begin
    var dc : boolean;
    dc := true;
    ReadMyDsk (cPodpGrp,sPrefix+'.cPodpGrp', dc)
  end;
  
  procedure ReInit;
  begin
    set wKODGRKAU := 50005;
    var s : String;
    s := '';
    s := TranslatePath ('%PODP_KODAN%');
    if (s <> '') {
      wKODGRKAU := word (s);
    }

    if (getfirst spKAUPodp = tsOk) {};
    if (getfirst spKAU = tsOk) {};
    
    
    ReadDsk;
  end;
  
  
  procedure SelectPodpis;
  begin
    var qwer : F_GetAn::GetKau new;
    
    if  (qwer.GetCodeKau(word(cgiPick + cgiNotEdit + cgiNotClear ), wKODGRKAU, cPodpGrp) =0) then {
      //set cPodpGrp := 0;
      //RescanPanel (brplan_src);
      //exit;
    };

    //DoneMarker(coPodpis,'');
    //set coPodpis := InitMarker(qwer.GetMarkerName(wKODGRKAU),8,50,10);
    
    if (getfirst spKAU = tsOK){};
    //RescanPanel (brplan_src);
    savedsk;
  end;
  
  /*
  constructor Init;
  begin
    set wKODGRKAU := 50005;
    ReInit;
  end;
  */

  property IPodpis.dolj : string[100] read getDolj;
  property IPodpis.fio : string[100] read getFIO;
  property IPodpis.levelcode : string[100] absolute spKAUPodp.LEVELCODE read;
  property IPodpis.wKODGRKAU : word absolute vwKODGRKAU read  write ;
  property IPodpis.DialogFieldString : string[100] read getDialogFieldString;
  
  
  index IPodpis.iByLevelCode auto;

end.
