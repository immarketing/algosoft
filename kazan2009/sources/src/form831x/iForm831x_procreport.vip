  function trimFirst0 (st : String):string; forward;
  procedure doGroupPrintedDatasAtCurrentPage; forward;
  procedure doCalculateAnalitAgregatesSums; forward;
  function isKauGroup (const pRec : comp) : byte; forward;

  create view lvlnmb
  var
    cPos : comp
  as
  select *
    from fpSpAxtf spAx
   where ((
   cPos == spAx.nrec
   ))
   ;

  function getCurrentLevelNumber : word;
  begin

    result := 0;

    set lvlnmb.cPos := fpSpAxtf.nRec;
    do {
      if (lvlnmb.getfirst spAx = tsOK) {
        if (lvlnmb.spAx.cNode = 0) {
          exit;
        } else {
          inc (result);
          set lvlnmb.cPos := lvlnmb.spAx.cNode;
        }
      } else {
        exit;
      }
    } while true;
  end;

  function repGetPrintRow: word;
  begin
    xlRunMacro('getRowToFill(1,1)');
    xlGetCellValue(1, 1, result);
  end;


  type PArray = array[1..3] of word;

#include iForm831x_procrepexprnt.vip

  procedure GetCurrentCodeName (var code : String ; var name : String);
  begin
    budgetCodificator.GetCodeAndName(fpSpAxtf.nrec, code, name);
  end;
  /*
  create view forGetCode
  var
  cKAU : comp;
  as select * from spkau where ((
  cKAU == spkau.nRec
  ))
  ;


  procedure GetCurrentCodeName (var code : String ; var name : String);
  begin
    // Replace (,'_','-')
    // fpStBud
    // superKAUfpStBud

    var cd, nm : String;

    if(fpSpAxtf.coTable = word(22217) ) {
      cd := fpStBud.abbr;
      nm := fpSpAxtf.name;
      //
      if ( SubStr (cd, Length(cd),1 )= '_'  ) {
        cd := cd + '00'
      }

      code := Replace (cd, '_', '-');
      name := nm;
    } else {
      if (getFirst superKauSpAxtf = tsOK ) {};
      if (getFirst superKAUfpStBud = tsOK ) {};
      cd := superKAUfpStBud.abbr;
      nm := fpSpAxtf.name;

      set forGetCode.cKAU := fpSpAxtf.cMEAN;
      if (forGetCode.getfirst spkau = tsOK) {
        code := Replace (cd + forGetCode.spkau.levelcode,'_','-');
      } else {
        code := Replace (cd + fpSpAxtf.levelcode,'_','-');
      }
      //
      name := fpSpAxtf.name;
    }
  end;
  */

  procedure PrintCurrentRowClass1();
  begin
    /*
    // самый верхний уровень группировки

    //xlSetCellStringValue(extraChar + trimFirst0(fpstbud.levelcode), 8, 1, 8, 1);
    //xlSetCellStringValue(extraChar + trimFirst0(fpstbud.abbr), 8, 1, 8, 1);
    xlSetCellStringValue(extraChar + trimFirst0(code2010), 8, 1, 8, 1);


    //xlSetCellStringValue(fpSpAxtf.levelcode, 8, 1, 8, 1); //
    xlSetCellStringValue(fpSpAxtf.name, 8, 2, 8, 2); //
    xlRunMacro('CopyRow(ROW0)');
    */
  end;

  procedure PrintCurrentRowClass3or4();
  begin
    /*
    var r2print : word;
    if (extCl = 4) {
      r2print := 10;
    } else {
      r2print := 48;
    }

    // Группа не верхнего уровня
    //xlSetCellStringValue(extraChar + trimFirst0(fpstbud.levelcode), r2print, 1, r2print, 1);
    //xlSetCellStringValue(extraChar + trimFirst0(fpstbud.abbr), r2print, 1, r2print, 1);
    xlSetCellStringValue(extraChar + trimFirst0(code2010), r2print, 1, r2print, 1);


    //xlSetCellStringValue(fpSpAxtf.levelcode, 10, 1, 10, 1); //
    xlSetCellStringValue(PadCh ('',' ', 2 * getCurrentLevelNumber) + fpSpAxtf.name, r2print, 2, r2print, 2); //
    ExcelPrint3(fpSpAxtf.coTable,cPlan,150,r2print,3, arValues[1]); // План 1
    ExcelPrint3(fpSpAxtf.coTable,cPlan,150,r2print,4, arValues[3]); // План 3
    ExcelPrint3(fpSpAxtf.coTable,cPlan,150,r2print,4, arValues[2]); // План 2

    if ( abs (arValues[1]) < 0.0000001 and abs (arValues[2]) < 0.0000001 and abs (arValues[3]) < 0.0000001) then {
      if (not isShowZeros and fpSpAxtf.isLeaf = 1) {
        continue;
      }
    }

    if (extCl = 2) {
      // - в подвал
      insert f791_podval set  f791_podval.name := PadCh ('',' ', 2 * getCurrentLevelNumber) + fpSpAxtf.name,
                              f791_podval.code := extraChar + trimFirst0(fpSpAxtf.levelcode),
                              f791_podval.summa:= arValues[2]
                              ;
    }

    arValues[3] := arValues[3] - if ( (arValues[1]- arValues[2]) < 0 ,arValues[1],arValues[2]) ;
    //xlSetCellNumberValue(if (arValues[3]<0,0,arValues[3]) , r2print, 6 , r2print, 6 );

    if (extCl <> 2) {
      if (extCl = 4) {
        xlRunMacro('CopyRow(ROW2)');
      } else {
        xlRunMacro('CopyRow(ROW791ITOGO)');
      }
    };
    */
  end;

  procedure PrintCurrentRowClass0( const extraChar : String;
                                   const code2010_  : String
                                   );
  begin
    var arValues : array[1..3] of double;

    var planCols : array[1..3] of word;
    planCols[1] := budVariantsSetup[1].tmplColMonth;
    planCols[2] := budVariantsSetup[1].tmplColKvart ;
    planCols[3] := budVariantsSetup[1].tmplColYear ;
    var planCCols : array[1..3] of word;
    planCCols[1] := budVariantsSetup[2].tmplColMonth ;
    planCCols[2] := budVariantsSetup[2].tmplColKvart ;
    planCCols[3] := budVariantsSetup[2].tmplColYear ;
    var factCols : array[1..3] of word;
    factCols[1] := budVariantsSetup[3].tmplColMonth ;
    factCols[2] := budVariantsSetup[3].tmplColKvart ;
    factCols[3] := budVariantsSetup[3].tmplColYear ;

    var code2010, name2010 : String;
    GetCurrentCodeName (code2010, name2010);

    // Лист - простая строка
    //xlSetCellStringValue(extraChar + trimFirst0(fpstbud.levelcode), 9, 1, 9, 1);
    //xlSetCellStringValue(extraChar + trimFirst0(fpstbud.abbr), 9, 1, 9, 1);
    //xlSetCellStringValue(extraChar + trimFirst0(code2010), 15, 1, 15, 1);

    var tCdCol, tNmCol : word;

    if (templateRec.tmplCodePlaceCol <> 0 ) then tCdCol := templateRec.tmplCodePlaceCol else tCdCol := 1;
    if (templateRec.tmplNamePlaceCol <> 0 ) then tNmCol := templateRec.tmplNamePlaceCol else tNmCol := 2;


    xlSetCellStringValue(extraChar + trimFirst0(code2010), templateRec.tmplRow, tCdCol, templateRec.tmplRow, tCdCol);

    //xlSetCellStringValue(fpSpAxtf.levelcode, 9, 1, 9, 1); //
    //xlSetCellStringValue(PadCh ('',' ', 2 * getCurrentLevelNumber) + fpSpAxtf.name, 15, 2, 15, 2); //
    //xlSetCellStringValue(PadCh ('',' ', 2 * getCurrentLevelNumber) + name2010, 15, 2, 15, 2); //
    xlSetCellStringValue(PadCh ('',' ', 2 * getCurrentLevelNumber) + name2010, templateRec.tmplRow, tNmCol, templateRec.tmplRow, tNmCol); //

    ExcelPrint3(fpSpAxtf.coTable,budVariantsSetup[1].cfpBudVar,budVariantsSetup[1].regType,templateRec.tmplRow,planCols, arValues[1]); // План 1

    ExcelPrint3(fpSpAxtf.coTable,budVariantsSetup[2].cfpBudVar,budVariantsSetup[2].regType,templateRec.tmplRow,planCCols, arValues[2]); // План 1

    ExcelPrint3(fpSpAxtf.coTable,budVariantsSetup[3].cfpBudVar,budVariantsSetup[3].regType,templateRec.tmplRow,factCols, arValues[3]); // План 2

    /*
    if (extCl = 2) {
      // - в подвал
      insert f791_podval set  f791_podval.name := PadCh ('',' ', 2 * getCurrentLevelNumber) + fpSpAxtf.name,
                              f791_podval.code := extraChar + trimFirst0(fpSpAxtf.levelcode),
                              //f791_podval.code := fpstbud.levelcode,
                              f791_podval.summa:= arValues[2];
    }
    */

    //arValues[3] := arValues[3] - if ( (arValues[1]- arValues[2]) < 0 ,arValues[1],arValues[2]) ;

    /*

    if ( abs (arValues[1]) < 0.0000001 and abs (arValues[2]) < 0.0000001 and abs (arValues[3]) < 0.0000001) then {
      if (not isShowZeros and fpSpAxtf.isLeaf = 1) {
        continue;
      }
    }
    */

    //xlSetCellNumberValue( if (arValues[3]<0,0,arValues[3]) , 9, 6 , 9, 6 );

    //xlRunMacro('CopyRow(ROWORDINAL)');
    xlRunMacro('CopyRow(' + templateRec.tmplRowName +')');

    /*
    if (extCl <> 2) {
      xlRunMacro('CopyRow(ROW1)');
    };
    */
  end;

  procedure DoPrintSigners;
  begin
    if not podpisanty.isSelected then exit;

    _loop podpisanty {
      var ar : array [1..2] of string;
      ar[1] := podpisanty.dolj;
      ar[2] := podpisanty.fio;

      xlSetCellStringValue(ar[1] , signers.doljCell.row, signers.doljCell.col, signers.doljCell.row, signers.doljCell.col); // ??N? - ????
      xlSetCellStringValue(ar[2] , signers.fioCell.row, signers.fioCell.col, signers.fioCell.row, signers.fioCell.col); // ??N? - ????

      xlRunMacro('CopyRow('+ signers.sgnRowName +')');

    }
  end;



  procedure PrintCurrentRowClassifiedBy(
                                   const classificator : byte;
                                   const extraChar : String;
                                   const code2010  : String;
                                   var memTblRec : type$f831_printed;
                                   var isStoreMemTblRec : boolean
                                   );
  begin
    if ( classificator = 1 /* fpSpAxtf.cNode = 0h */)then {
      PrintCurrentRowClass1;
    } else if (  (classificator = 3)  or (classificator = 4)  /* агрегат /* fpSpAxtf.isLeaf = 0 */ )then {
      PrintCurrentRowClass3or4;
    } else {
      PrintCurrentRowClass0 (extraChar, code2010);
    }

    memTblRec.cRec := fpSpAxtf.nRec;
    memTblRec.printedAtRow := repGetPrintRow - 1;
    memTblRec.cNode := fpSpAxtf.cNode;
    memTblRec.code := code2010;
    memTblRec.coTable := fpSpAxtf.coTable;
    memTblRec.isKauGroup := isKauGroup (fpSpAxtf.nRec);

    set isStoreMemTblRec := true;
  end;

  procedure DoPrintAttributesAtBegin;
  begin
    _loop f831_attributes {
      case f831_attributes.vType of
        cgAttrType_Str : {
          xlSetCellStringValue( f831_attributes.vString,
                                f831_attributes.row,
                                f831_attributes.col,
                                f831_attributes.row,
                                f831_attributes.col
                                ); //
        }
        cgAttrType_Dbl : {
          xlSetCellNumberValue( f831_attributes.vDouble,
                                f831_attributes.row,
                                f831_attributes.col,
                                f831_attributes.row,
                                f831_attributes.col
                                        ); //
        }
      end;
    }
  end;

  procedure ClearTempTables;
  begin
    delete all f831_printed;
    delete all f831_kauGroups;
    delete all f831_values;
  end;

  procedure doPrintReport8311;
  begin
    var tt:word;

    ClearTempTables;

    //Message ( 'doPrintReport8311');

    tt:=0;

    if isStartExcel then {
      xlCreateExcelWithTemplate(sPath,true);
    }

    var dataSheetName : string;
    //dataSheetName  := 'datas8.3.1.x';
    dataSheetName  := templateRec.dataSheetName;
    var reportSheetName : string;
    //reportSheetName  := 'rep8.3.1.x';
    reportSheetName  := templateRec.repSheetName;

    //xlRunMacro('REP_BegoreReportPrint831x');
    if (templateRec.startMacrosName <> '') then {
      xlRunMacro(templateRec.startMacrosName);
    }
    xlRunMacro('setDataSheetName('+dataSheetName+')');
    xlRunMacro('setReportSheetName('+reportSheetName+')');
    xlRunMacro('setRowToFill('+String (templateRec.rowToStartWith)+')');

    xlSetActiveSheetByName(dataSheetName);

    DoPrintAttributesAtBegin ;

    xlSetCellStringValue(sPeriod, templateRec.periodNameCell.row,
                                  templateRec.periodNameCell.col,
                                  templateRec.periodNameCell.row,
                                  templateRec.periodNameCell.col
                                  ); //

    if (templateRec.scaleNameCell.row <> 0 and templateRec.scaleNameCell.col <>0) then {
      xlSetCellStringValue(reportScaleName,
                                    templateRec.scaleNameCell.row,
                                    templateRec.scaleNameCell.col,
                                    templateRec.scaleNameCell.row,
                                    templateRec.scaleNameCell.col
                                    ); //
    }

    var
      arValues : array [1..3] of double;

    _LOOP fpSpAxtf {
      NextVisual;
      inc(tt);
      set cStBud  := 0;
      if(fpSpAxtf.coTable = word(22217) )       // (isValid(tnfpstbud))
      {
        set cStBud  := fpSpAxtf.cMean;//
        set cHashAn := comp(0);
        //xlSetCellStringValue('1', 1+tt, 40, 1+tt, 40);
      } else{
        if (getFirst superKauSpAxtf = tsOK) {
          /*
          if (getFirst superfpSpAxtf2 = tsOK) {
            set cStBud  := superfpSpAxtf2.cMEAN;
          }
          */
          set cStBud  := superKauSpAxtf.cMEAN;
        }
        set cHashAn := Hashan.nrec;
        //xlSetCellStringValue('2', 1+tt, 40, 1+tt, 40);
      }

      var code2010, name2010 : String;
      /*
      GetCurrentCodeName (code2010, name2010);
      */

      var delit : double;
      if(Check=0)      {
        delit := 1;
      }      else      {
        delit := 1000;
      }

      var extCl : byte;
      extCl := 0;
      var extCl1 : byte;
      extCl1 := 0;
      var extraChar : string;
      extraChar := '''';
      if ( fpSpAxtf.coTable = coFPSTBUD ) {
        extCl  := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName );
        extCl1 := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName1 );
      } else {
        if (getfirst superfpSpAxtf = tsOK) {}
        extCl  := GetStBudExtraParameters( coFPSTBUD , superfpSpAxtf.CMEAN, extClName );
        extCl1 := GetStBudExtraParameters( coFPSTBUD , superfpSpAxtf.CMEAN, extClName1 );
      }

      var isStoreMR : boolean;
      isStoreMR := false;

      var memRec : type$f831_printed;

      PrintCurrentRowClassifiedBy(extCl,extraChar, code2010, memRec, isStoreMR);

      if (isStoreMR) {
        set f831_printed.buffer := memRec;
        insert current f831_printed;
      }

    }

    //ROWTBLFINISH
    //xlRunMacro('CopyRow(ROWTBLFINISH)');
    xlRunMacro('CopyRow(' + templateRec.tmplLastTblRowName +')');


    xlSetActiveSheetByName(reportSheetName); //?????_1
    //xlRunMacro('AfterPrint831x');

    if (IsGrouping) {
      doGroupPrintedDatasAtCurrentPage;
    }

    doCalculateAnalitAgregatesSums;

    if (templateRec.finishMacrosName <> '') then {
      xlRunMacro(templateRec.finishMacrosName);
    }

    if isKillExcel then {
      xlKillExcel;
    }
  end;
