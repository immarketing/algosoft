#include iForm641_extClass.vip

#include iForm641_DSKWork.vip

  create view forGetCode
  var
  cKAU : comp;
  as select * from spkau where ((
  cKAU == spkau.nRec
  ))
  ;

  procedure GetCurrentCodeName (var code : String ; var name : String);
  begin
    // Replace (,'_','-')
    // fpStBud
    // superKAUfpStBud

    var cd, nm : String;

    if(fpSpAxtf.coTable = word(22217) ) {
      cd := fpStBud.abbr;
      nm := fpSpAxtf.name;
      //
      if ( SubStr (cd, Length(cd),1 )= '_'  ) {
        cd := cd + '00'
      }

      code := Replace (cd, '_', '-');
      name := nm;
    } else {
      if (getFirst superKauSpAxtf = tsOK ) {};
      if (getFirst superKAUfpStBud = tsOK ) {};
      cd := superKAUfpStBud.abbr;
      nm := fpSpAxtf.name;

      set forGetCode.cKAU := fpSpAxtf.cMEAN;
      if (forGetCode.getfirst spkau = tsOK) {
        code := Replace (cd + forGetCode.spkau.levelcode,'_','-');
      } else {
        code := Replace (cd + fpSpAxtf.levelcode,'_','-');
      }

      //
      name := fpSpAxtf.name;
    }
  end;


  function trimFirst0 (st : String):string;
  begin
    result := st;
    exit;

    if st = '' then {
      result := '';
      exit
    };
    if substr (st,1,1) = '0' then
      result := trimFirst0 (substr (st,2,255))
    else
      result := st;
  end;

  function repGetPrintRow: word;
  begin
    xlRunMacro('getRowToFill(1,1)');
    xlGetCellValue(1, 1, result);
  end;

  procedure printSigners;
  begin
    if not podpisanty.isSelected then exit;

    _loop podpisanty {
      var ar : array [1..2] of string;
      ar[1] := podpisanty.dolj;
      ar[2] := podpisanty.fio;

      xlSetCellStringValue(ar[1] + '____________________________________' + ar[2] , 30 , 1, 30, 1); //
      //xlSetCellStringValue( , 30, 11, 30, 11); //
      xlRunMacro('CopyRow(ROWSIGN)');

    }
  end;

  procedure printExecutor;
  begin
    var sFIO :String ;
    sFIO := Trim (sGetTune ('USER.FIO'));
    var ps1 : byte;
    ps1 := pos (' ',sFIO);
    if (ps1 <> 0 ){
      var sfam : String;
      //sFAM := substr (sFIO,1,ps1-1);
      sFAM := substr (sFIO,1,ps1-1) + ' ' + Substr (trim (substr (sFIO,ps1+1,255)),1,1) + '.';

      sFIO := trim (substr (sFIO,ps1+1,255));
      ps1 := pos (' ',sFIO);

      if (ps1 <> 0) {
        sFAM := sFAM + ' ' + Substr (trim (substr (sFIO,ps1+1,255)),1,1) + '.';
      } else {
      }

      sFIO := sFAM;
    }


    //xlSetCellStringValue('/ '+ sFIO + ' /', 15, 9, 15, 9);

    var tel : string;

    if (getFirst persons where (( sGetTune ('USER.FIO') == persons.FIO (noindex) )) = tsOK) {
      if (getFirst COMMUNICATIONS where ((  persons.nrec == COMMUNICATIONS.person and
                                            comp('000000000000022Bh') == COMMUNICATIONS.comtype
                                            )) = tsOK){
        tel := COMMUNICATIONS.ADDR;
      }
    }
    xlSetCellStringValue(sFIO + ',' + tel , 35, 1, 35, 1);
    xlRunMacro('CopyRow(ROWEX)');

  end;

  function DeleteColumns (periodNum : byte) : byte;
  begin
    var i : byte;

    result := 50;

    if (isDebugHideClmns) {

      for (i := 12; i>=1; dec(i)) {
        if (i < periodNum) {
          // факт
          xlRunMacro('DeleteEntireColumn641 ( ' + (3 + (i-1)*3 + 3) + ' )');
          xlRunMacro('DeleteEntireColumn641 ( ' + (3 + (i-1)*3 + 2) + ' )');

          result := result - 2;

          xlSetCellStringValue('Факт' , 8, 3 + (i-1)*3 + 1, 8, 3 + (i-1)*3 + 1);
        } else if (i = periodNum) {
          // ожид. факт = факт ???
          xlRunMacro('DeleteEntireColumn641 ( ' + (3 + (i-1)*3 + 3) + ' )');
          xlRunMacro('DeleteEntireColumn641 ( ' + (3 + (i-1)*3 + 2) + ' )');
          //xlSetCellStringValue('Ожид. факт' , 3 + (i-1)*3 + 1, 1, 3 + (i-1)*3 + 1, 1);
          result := result - 2;

          xlSetCellStringValue('Ожид. факт' , 8, 3 + (i-1)*3 + 1, 8, 3 + (i-1)*3 + 1);
        } else if (i > periodNum) {
          // планы, доп. планы и корректировка. ???
          //xlRunMacro('DeleteEntireColumn ( ' + (3 + (i-1)*3 + 1) + ' )');
          //xlRunMacro('DeleteEntireColumn ( ' + (3 + (i-1)*3 + 2) + ' )');
        }
      }
    }
  end;

  procedure MarkColumns (periodNum : byte);
  begin
    var i : byte;
    var colMark : byte;
    colMark := 4;
    for (i := 1; i<=12; inc(i)) {
      if (i < periodNum) {
        // факт
        xlSetCellStringValue('' + colMark ,9, colMark, 9, colMark);
        colMark += 1;
      } else if (i = periodNum) {
        // ожид. факт = факт ???
        xlSetCellStringValue('' + colMark ,9, colMark, 9, colMark);
        colMark += 1;
      } else if (i > periodNum) {
        xlSetCellStringValue('' + colMark ,9, colMark, 9, colMark);
        xlSetCellStringValue('' + (colMark + 1) ,9, colMark + 1, 9, colMark + 1);
        xlSetCellStringValue('' + (colMark + 2) + '=' + colMark + ' + ' + (colMark + 1) ,
                                  9, colMark + 2, 9, colMark + 2);
        colMark += 3;
      }
    }
    xlSetCellStringValue('' + colMark ,9, colMark+1, 9, colMark+1);
    xlSetCellStringValue('' + (colMark + 1) + '=' + (colMark+0) + ' - 3',
                            9, colMark + 2, 9, colMark + 2);

  end;

  procedure ExcelPrint2(CopyBud:comp; FP:word; Nstr:word; Nstol:word; varnt : byte);
  begin
    Set cCopyBud:=CopyBud;
    Set cFP:= FP;

    var sm : double;
    sm := 0;

    var cacheVal : type$p_f641_printed;
    cacheVal := f641_printed.bufferp;

    //      _LOOP  fpSpAxtf
    _LOOP  fpV {
      //if((month(fpP.dbeg)=month(fpP.dEnd)) and (year(fpP.dbeg)=year(fpperiod.dbeg) and (fpvalues.chashan = 0))) { //chek year
      if (true) { //chek year
        if(Check=0) {
          sm := fpv.summa;
          //xlSetCellNumberValue(     , Nstr, Nstol + month(fpP.dbeg), Nstr, Nstol + month(fpP.dbeg));
        }else{
          sm := fpv.summa/1000;
          //xlSetCellNumberValue(fpv.summa/1000, Nstr, Nstol + month(fpP.dbeg), Nstr, Nstol + month(fpP.dbeg));
        }
        //xlSetCellNumberValue(sm, Nstr, Nstol + month(fpP.dbeg), Nstr, Nstol + month(fpP.dbeg));

        case varnt of
          /*
          Plan : update current f641_printed set f641_printed.sumvar1[month(fpP.dbeg)] := sm ;
          DopPlan : update current f641_printed set f641_printed.sumvar2[month(fpP.dbeg)] := sm ;
          Fact : update current f641_printed set f641_printed.sumvar3[month(fpP.dbeg)] := sm ;
          OjidPlan : update current f641_printed set f641_printed.sumvar4[month(fpP.dbeg)] := sm ;
          PlanOtd : update current f641_printed set f641_printed.sumvarOtd[month(fpP.dbeg)] := sm ;
          */
          Plan : set cacheVal.sumvar1[month(fpP.dbeg)] := sm ;
          DopPlan : set cacheVal.sumvar2[month(fpP.dbeg)] := sm ;
          Fact : set cacheVal.sumvar3[month(fpP.dbeg)] := sm ;
          OjidPlan : set cacheVal.sumvar4[month(fpP.dbeg)] := sm ;
          PlanOtd : set cacheVal.sumvarOtd[month(fpP.dbeg)] := sm ;
        end

      }
      else{}
    }

    f641_printed.bufferp := cacheVal;
    update current f641_printed;
  end;

  procedure ExcelPrint2_2010
                       ( wTbl : word;
                         CopyBud:comp;
                         FP:word;
                         Nstr:word;
                         Nstol:word;
                         varnt : byte
                         );
  begin
    if (wTbl = 22217){ // статья бюджета
      ExcelPrint2 (CopyBud,FP,Nstr,Nstol,varnt);
      exit;
    }
    // аналитика
    //xlSetCellNumberValue(0 , Nstr, Nstol , Nstr, Nstol );

    Set cCopyBud:=CopyBud;
    Set cFP := FP;
    var sm : double;
    sm := 0;

    if (getFirst superfpSpAxtf = tsOK) {
      if (getFirst HashAn = tsOK) {
        var cacheVal : type$p_f641_printed;
        cacheVal := f641_printed.bufferp;

        _loop fpV2 {
          if (getFirst fpP2 <> tsOK)  {};
          //if((month(fpP2.dbeg)=month(fpP2.dEnd)) and (year(fpP2.dbeg)=year(fpperiod.dbeg) )) {
          if(true) {
            if(Check=0) {
              //xlSetCellNumberValue(fpv2.summa     , Nstr, Nstol , Nstr, Nstol );
              sm := fpv2.summa;
            } else {
              //xlSetCellNumberValue(fpv2.summa/1000, Nstr, Nstol , Nstr, Nstol );
              sm := fpv2.summa/1000;
            }
            case varnt of
              /*
              Plan : update current f641_printed set f641_printed.sumvar1[month(fpP2.dbeg)] := sm ;
              DopPlan : update current f641_printed set f641_printed.sumvar2[month(fpP2.dbeg)] := sm ;
              Fact : update current f641_printed set f641_printed.sumvar3[month(fpP2.dbeg)] := sm ;
              OjidPlan : update current f641_printed set f641_printed.sumvar4[month(fpP2.dbeg)] := sm ;
              PlanOtd : update current f641_printed set f641_printed.sumvarOtd[month(fpP2.dbeg)] := sm ;
              */
              Plan : set cacheVal.sumvar1[month(fpP2.dbeg)] := sm ;
              DopPlan : set cacheVal.sumvar2[month(fpP2.dbeg)] := sm ;
              Fact : set cacheVal.sumvar3[month(fpP2.dbeg)] := sm ;
              OjidPlan : set cacheVal.sumvar4[month(fpP2.dbeg)] := sm ;
              PlanOtd : set cacheVal.sumvarOtd[month(fpP2.dbeg)] := sm ;
            end

          }
        }
        set f641_printed.bufferp := cacheVal;
        update current f641_printed;

      }
    }
  end;


  function CalcCurrentSumBDSGod (pNum : byte) : double;
  begin
    var i : byte;
    result := 0;
    for ( i := 1; i <=12; inc(i)){
      if (i < pnum) {
        // здесь - из факта
        result += f641_printed.sumvar3[i];
      } else if (i = pnum) {
        // здесь - из ожидаемого факта
        result += f641_printed.sumvar4[i];
      } else if (i = (pnum + 1)) {
        // из доп. потребности
        result += f641_printed.sumvar2[i];
      } else {
        // из доп. потребности
        result += if (f641_printed.sumvar2[i]>0,f641_printed.sumvar2[i], f641_printed.sumvar1[i] );
      }
    }
  end;

  function min (p1,p2 : double) : double;
  begin
    result := if (p1>p2,p2,p1);
  end;

  function d2s(v : double):String;
  begin
    result := DoubleToStr (v,   '\d,666666666667^899999999999');
  end;

  create view forGrouping
  as
  select *
    from
          f641_printed f641_printed_ord2 ,
          f641_printed subp3 (f641_ptd_node_prrow),
          f641_printed subpleafs
   where ((
   f641_printed_ord2.cRec == subp3.cNode and

   f641_printed_ord2.cRec == subpleafs.cNode and
   0 == subpleafs.isLeaf
   ))
        ;

  // процедура расчета сумм по группам аналитик
  procedure doPreCalcAnalitAggregates;
  begin
    forGrouping._loop f641_printed_ord2{
      if (forGrouping.f641_printed_ord2.isKauGroup = 0)then {
        continue;
      }
      if getFirst f641_printed where ((forGrouping.f641_printed_ord2.nRec == f641_printed.nRec)) = tsOK then {
        //
        var cb : type$f641_printed;
        set cb := f641_printed.buffer;

        var i : byte;

        for (i := 1; i <=12; inc(i)) {
          cb.sumvar1[i] := 0;
          cb.sumvar2[i] := 0;
          cb.sumvar3[i] := 0;
          cb.sumvar4[i] := 0;
        }

        forGrouping._loop subp3{
          for (i := 1; i <=12; inc(i)) {
            cb.sumvar1[i] += forGrouping.subp3.sumvar1[i];
            cb.sumvar2[i] += forGrouping.subp3.sumvar2[i];
            cb.sumvar3[i] += forGrouping.subp3.sumvar3[i];
            cb.sumvar4[i] += forGrouping.subp3.sumvar4[i];
          }
        }

        f641_printed.buffer := cb;
        update current f641_printed;
      }
    }
  end;

  function isCurGroupHasLeafsOnly: boolean;
  begin
    set result := not (forGrouping.getFirst subpleafs = tsOK);
  end;

  Procedure doGroupPrintedData(const periodNum : word);
  begin
    forGrouping._loop f641_printed_ord2{
      {
        // =rep791!R[-3]C[2]
        if (getFirst i791printed where ((forGrouping.f641_printed_ord2.cRec == i791printed.cRec)) = tsOK) then {
          var rw : integer;
          var c1,c2,c3 : integer;

          rw := (i791printed.printedatrow - forGrouping.f641_printed_ord2.printedAtRow);

          var i : byte;

          i := periodNum + 1;

          c1 := 3 - (3 + (i-1)*3 + 1);
          c2 := 6 - (3 + (i-1)*3 + 2);
          c3 := 7 - (3 + (i-1)*3 + 3);

          xlSetCellFormula (  '=rep791!R[' + (rw) + ']C[' + c1 + ']',
                               forGrouping.f641_printed_ord2.printedAtRow, 3 + (i-1)* 3 + 1 ,
                               forGrouping.f641_printed_ord2.printedAtRow, 3 + (i-1)* 3 + 1
                               );
          xlSetCellFormula (  '=rep791!R[' + (rw) + ']C[' + c2 + ']',
                               forGrouping.f641_printed_ord2.printedAtRow, 3 + (i-1)* 3 + 2 ,
                               forGrouping.f641_printed_ord2.printedAtRow, 3 + (i-1)* 3 + 2
                               );
          xlSetCellFormula (  '=rep791!R[' + (rw) + ']C[' + c3 + ']',
                               forGrouping.f641_printed_ord2.printedAtRow, 3 + (i-1)* 3 + 3 ,
                               forGrouping.f641_printed_ord2.printedAtRow, 3 + (i-1)* 3 + 3
                               );

        }
      }

      if forGrouping.f641_printed_ord2.isKauGroup = 1 then {
        // эта строка - группа по аналитике - ничего с ней делать не надо, блин.
        /*
        if (isCurGroupHasLeafsOnly) {
        }
        continue;
        */
      }
      var fSum : string;
      fSum := '';

      var fHdnSum : string;
      fHdnSum := '';

      var hiddenSumCol : byte;
      hiddenSumCol     := 44;

      if (forGrouping.f641_printed_ord2.extPar = 1) {
        continue;
      }

      if isCurGroupHasLeafsOnly {
        var subFirstRow : word;
        subFirstRow := 0;

        var subLastRow : word;
        subLastRow := 0;

        if forGrouping.getFirst subp3 = tsOK then { subFirstRow := forGrouping.subp3.printedAtRow;};
        if forGrouping.getLast subp3 = tsOK then { subLastRow := forGrouping.subp3.printedAtRow;};

        // R[1]C:R[86]C

        if (subFirstRow <> 0 and subLastRow <> 0) then {
          var raz1 : integer;
          raz1  := subFirstRow - forGrouping.f641_printed_ord2.printedAtRow ;
          var raz2 : integer;
          raz2  := subLastRow - forGrouping.f641_printed_ord2.printedAtRow ;

          fSum := 'R['+(raz1)+']C:R['+(raz2)+']C';
          fHdnSum := 'R['+(raz1)+']C['+( (3 + ( (periodNum +2) -1)*3 + 3) - hiddenSumCol)+']:R['+(raz2)+']C['+
          ( (3 + ( (periodNum +2) -1)*3 + 3) - hiddenSumCol)+']';
        }

      } else {
        forGrouping._loop subp3{
          if (forGrouping.subp3.coTable <> coTableToSum) then {
            continue;
          }

          var tsts : string;
          var raz : integer;

          raz  := forGrouping.subp3.printedAtRow - forGrouping.f641_printed_ord2.printedAtRow ;
          tsts := ''+ raz;

          fSum := fSum + ';R[' + tsts + ']C';

          fHdnSum := fHdnSum + ';R[' + tsts + ']C[' + ( (3 + ( (periodNum +2) -1)*3 + 3) - hiddenSumCol) +']';
        }
      }

      if (fSum > '') {
        //xlSetCellFormula('=Сумм('+fSum+')',forGrouping.f791_printed_ord2.printedAtRow,3,forGrouping.f791_printed_ord2.printedAtRow,7);
        for (i := periodNum; i<=12; inc(i)) {
          if (forGrouping.f641_printed_ord2.isKauGroup = 1){
            xlSetCellFormula( '=Сумм('+fSum+')',
                              forGrouping.f641_printed_ord2.printedAtRow,
                              3 + (i-1)*3 + 1,
                              forGrouping.f641_printed_ord2.printedAtRow,
                              3 + (i-1)*3 + 1
                              );
          }

          if (i = periodNum + 2) {
            xlSetCellFormula( '=Сумм('+fHdnSum+')',
                              forGrouping.f641_printed_ord2.printedAtRow,
                              hiddenSumCol,
                              forGrouping.f641_printed_ord2.printedAtRow,
                              hiddenSumCol
                              );

          } else {
            xlSetCellFormula( '=Сумм('+fSum+')',
                              forGrouping.f641_printed_ord2.printedAtRow,
                              3 + (i-1)*3 + 3,
                              forGrouping.f641_printed_ord2.printedAtRow,
                              3 + (i-1)*3 + 3
                              );
          }

          if (i = periodNum + 2) {
            xlSetCellFormula( '=RC[' + (44 - (3 + (i-1)*3 + 2))+ ']-RC[-1] + RC['+ (43 - (3 + (i-1)*3 + 2))+ ']',
                              forGrouping.f641_printed_ord2.printedAtRow,
                              3 + (i-1)*3 + 2,
                              forGrouping.f641_printed_ord2.printedAtRow,
                              3 + (i-1)*3 + 2
                              );
          } else if (i > (periodNum + 1)) {
            xlSetCellFormula( '=RC[1]-RC[-1]',
                              forGrouping.f641_printed_ord2.printedAtRow,
                              3 + (i-1)*3 + 2,
                              forGrouping.f641_printed_ord2.printedAtRow,
                              3 + (i-1)*3 + 2
                              );
          }
        }
      }
    }
  end

  procedure doPrintExtraSum641_2 (const periodNum : byte);
  begin
    var extraSm : word;
    extraSm := 0;

    var extraFrm : String;
    extraFrm := '=СУММ(0';

    _LOOP  fpSpAxtf  {
      if(isValid(tnfpstbud)) { //chek year
        if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) = tsOK ) {
        };
        if (f641_printed.extPar4 = 5){
          // тут должна быть сумма
          extraSm := f641_printed.printedAtRow;
        }

      }
    }

    if (extraSm <> 0) {
      _LOOP  fpSpAxtf  {
        if(isValid(tnfpstbud)) { //chek year
          if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) = tsOK ) {
          };
          if (f641_printed.extPar4 = 6){
            // тут надо сложить
            extraFrm := extraFrm + ';R[' + (f641_printed.printedAtRow - extraSm) + ']C';
          }
          if (f641_printed.extPar4 = 7){
            // тут надо отнять
            extraFrm := extraFrm + ';-R[' + (f641_printed.printedAtRow - extraSm) + ']C';
          }
        }
      }

      extraFrm := extraFrm + ')';

      var i : byte;

      for (i := 1; i<=12; inc(i)) {
        if (i > periodNum+1) {
          xlSetCellFormula( extraFrm,
                            extraSm,
                            3 + (i-1)*3 + 2,
                            extraSm,
                            3 + (i-1)*3 + 3
                            );
        }
      }
      xlSetCellFormula( extraFrm,
                        extraSm,
                        3 + (12-1)*3 + 5,
                        extraSm,
                        3 + (12-1)*3 + 5
                        );

    }
  end;

  procedure doPrintExtraSum641_0 (const periodNum : byte);
  begin
    var extraSm : array [1..2] of word;

    var i : byte;
    for (i := 1 ; i<=2 ; i := i + 1){

      extraSm[i] := 0;
    }
    //extraSm := 0;

    var extraFrm : array [1..2] of String;
    for (i := 1 ; i<=2 ; i := i + 1){
      extraFrm[i] := '=СУММ(0';
    }


    _LOOP  fpSpAxtf  {
      if(isValid(tnfpstbud)) { //chek year
        if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) = tsOK ) {
        };

        for (i := 1 ; i<=2 ; i := i + 1){
          if (f641_printed.extPar0[i] = 5){
            // тут должна быть сумма
            extraSm[i] := f641_printed.printedAtRow;
          }
        }
      }
    }

    for (i := 1 ; i<=2 ; i := i + 1){
      if (extraSm[i] <> 0) {
        _LOOP  fpSpAxtf  {
          if(isValid(tnfpstbud)) { //chek year
            if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) = tsOK ) {
            };
            if (f641_printed.extPar0[i] = 6){
              // тут надо сложить
              extraFrm[i] := extraFrm[i] + ';R[' + (f641_printed.printedAtRow - extraSm[i]) + ']C';
            }
            if (f641_printed.extPar0[i]= 7){
              // тут надо отнять
              extraFrm[i] := extraFrm[i] + ';-R[' + (f641_printed.printedAtRow - extraSm[i]) + ']C';
            }
          }
        }
      }
    }

    for (i := 1 ; i<=2 ; i := i + 1){
      extraFrm[i] := extraFrm[i] + ')';
    }

    var j : byte;

    for (i := 1 ; i<=2 ; i := i + 1){
      if (extraSm[i] = 0) {
        continue;
      }
      for (j := 1; j<=12; inc(j)) {
        if (j > periodNum+1) {
          xlSetCellFormula( extraFrm[i],
                            extraSm[i],
                            3 + (j-1)*3 + 2,
                            extraSm[i],
                            3 + (j-1)*3 + 3
                            );
        }
      }
      xlSetCellFormula( extraFrm[i],
                        extraSm[i],
                        3 + (12-1)*3 + 5,
                        extraSm[i],
                        3 + (12-1)*3 + 5
                        );
    }
  end;

  procedure doPrintExtraSum641 (const periodNum : byte);
  begin
    var extraSm : word;
    extraSm := 0;

    var extraFrm : String;
    extraFrm := '=СУММ(0';

    _LOOP  fpSpAxtf  {
      if(isValid(tnfpstbud)) { //chek year
        if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) = tsOK ) {
        };
        if (f641_printed.extPar3 = 5){
          // тут должна быть сумма
          extraSm := f641_printed.printedAtRow;
        }

      }
    }

    if (extraSm <> 0) {
      _LOOP  fpSpAxtf  {
        if(isValid(tnfpstbud)) { //chek year
          if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) = tsOK ) {
          };
          if (f641_printed.extPar3 = 6){
            // тут надо сложить
            extraFrm := extraFrm + ';R[' + (f641_printed.printedAtRow - extraSm) + ']C';
          }
          if (f641_printed.extPar3 = 7){
            // тут надо отнять
            extraFrm := extraFrm + ';-R[' + (f641_printed.printedAtRow - extraSm) + ']C';
          }
        }
      }

      extraFrm := extraFrm + ')';

      var i : byte;

      for (i := 1; i<=12; inc(i)) {
        if (i > periodNum+1) {
          xlSetCellFormula( extraFrm,
                            extraSm,
                            3 + (i-1)*3 + 2,
                            extraSm,
                            3 + (i-1)*3 + 3
                            );
        }
      }
      xlSetCellFormula( extraFrm,
                        extraSm,
                        3 + (12-1)*3 + 5,
                        extraSm,
                        3 + (12-1)*3 + 5
                        );

    }
  end;


  procedure doPrintExtraSum (const periodNum : byte);
  begin
    var extraSm : word;
    extraSm := 0;

    var extraFrm : String;
    extraFrm := '=СУММ(0';

    _LOOP  fpSpAxtf  {
      if(isValid(tnfpstbud)) { //chek year
        if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) = tsOK ) {
        };
        if (f641_printed.AgregHandling = 5){
          // тут должна быть сумма
          extraSm := f641_printed.printedAtRow;
        }

      }
    }

    if (extraSm <> 0) {
      _LOOP  fpSpAxtf  {
        if(isValid(tnfpstbud)) { //chek year
          if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) = tsOK ) {
          };
          if (f641_printed.AgregHandling = 6){
            // тут надо сложить
            extraFrm := extraFrm + ';R[' + (f641_printed.printedAtRow - extraSm) + ']C';
          }
          if (f641_printed.AgregHandling = 7){
            // тут надо отнять
            extraFrm := extraFrm + ';-R[' + (f641_printed.printedAtRow - extraSm) + ']C';
          }
        }
      }

      extraFrm := extraFrm + ')';

      var i : byte;

      for (i := 1; i<=12; inc(i)) {
        if (i > periodNum) {
          xlSetCellFormula( extraFrm,
                            extraSm,
                            3 + (i-1)*3 + 2,
                            extraSm,
                            3 + (i-1)*3 + 3
                            );
        }
      }

    }



  end;

#include iForm641_kaugroup.vip
#include iForm641_isHandlable.vip
#include iForm641_usdPrd.vip

  procedure doPrintCurRowPeriodPlus1 (dataRow : word; i : word);
  begin
    if (not isUsing791printed) then {
      var frm : String;
      frm := '=' + 'ЕСЛИ((' +
                             d2s (f641_printed.sumvar2[i]) +'-' +
                             d2s (f641_printed.sumvar1[i]) + ')>0;' +
                             '('+ d2s (f641_printed.sumvar2[i]) +'-' +
                             d2s (f641_printed.sumvar1[i]) + ');0)' +
                             '+' +
                             if (f641_printed.SumKorr[i]<>0,f641_printed.SumKorrStr [i],'0');
      xlSetCellFormula (  frm,
                           dataRow, 3 + (i-1)* 3 + 2 ,
                           dataRow, 3 + (i-1)* 3 + 2
                           );

      xlSetCellNumberValue( f641_printed.sumvar2[i] ,
                            dataRow, 3 + (i-1)*3 + 3 ,
                            dataRow, 3 + (i-1)* 3 + 3
                            );
    } else {
    }
  end;


  procedure doPrintReport;
  begin
    var tms : array [1..10] of time;

    tms[1] := Cur_Time;

    buildUsedPeriods;

    //StoreDSK;
    var periodNum : byte;

    delete all f641_printed;

    //    message('Нажали на кнопку');
    pathUserOut := GetDefaultUserPath;
    NameExcel   := pathUserOut;
    wPeriod     := word(trim(NextNumStr(sPeriod)))-1;

    if (getFirst fpPeriod = tsOK){
      periodNum := month (fpPeriod.dBeg);

    } else {
      periodNum := 1;
    }

    if IsCreateAndKillExcel then {
      xlCreateExcelWithTemplate(sPath,true);
    }

    xlRunMacro('REP_BegoreReportPrint641');

    /*
    xlCreateExcel('',true);
    if (xlIsExcelValid)  {
      //         xlOpenWorkBook(translatepath('%startpath%')+'doc\Transport.xls');
      //         xlSetActiveWorkBookByName(translatepath('%startpath%')+'doc\Transport.xls');
      //         xlSaveAsWorkBookByName(translatepath('%startpath%')+'doc\Transport.xls', NameExcel+'.xls');

      xlOpenWorkBook(trim(sPath));
      xlSetActiveWorkBookByName(trim(sPath));
      xlSaveAsWorkBookByName(trim(sPath), NameExcel+'.xls');

    }
    */

    var dataSheetName : string;
    dataSheetName  := 'datas641';

    var reportSheetName : string;
    reportSheetName  := 'rep641';

    xlRunMacro('setDataSheetName('+dataSheetName+')');
    xlRunMacro('setReportSheetName('+reportSheetName+')');
    xlRunMacro('setRowToFill('+String (10)+')');

    xlSetActiveSheetByName(dataSheetName);
    //xlSetActiveSheet(1); //Титул_1
    if (getfirst fpPeriod = tsOK) {

      xlSetCellStringValue('' + year (fpPeriod.dbeg), 4, 2, 4, 2); //
    }

    if(Check=0) {
      xlSetCellStringValue('руб.', 4, 6, 4, 6); //
    } else {
      xlSetCellStringValue('тыс.руб.', 4, 6, 4, 6); //
    }

    //xlSetCellStringValue(month(fpperiod.dbeg), 1, 1, 1, 1); //
    //xlSetCellStringValue(year(fpperiod.dbeg), 1, 2, 1, 2); //

    var tt:word;
    tt:=0;
    var firstChar : String;
    firstChar := '''';
    //      SetOrder(tibyPrior);

    var stepsTotal : byte;
    stepstotal := 3;
    _LOOP  fpSpAxtf  {
      if (tt mod visualHeaderPause) = 0 then {
        setVisualHeader (FormatStr_4 ( 'Загрузка данных | %d из %d | %d | %s',1,stepstotal, tt ,fpSpAxtf.Name));
      };

      if(fpSpAxtf.coTable = word(22217) )       // (isValid(tnfpstbud))
      {
        set cStBud  := fpSpAxtf.cMean;//
      } else{
        if (getFirst superKauSpAxtf = tsOK) {
          set cStBud  := superKauSpAxtf.cMEAN;
        }
      }

      var code2010, name2010 : String;
      GetCurrentCodeName (code2010, name2010);


      if(isValid(tnfpstbud) or 1=1) { //chek year
        inc(tt);

        var extCl : byte;
        extCl := 0;

        if ( fpSpAxtf.coTable = coFPSTBUD ) {
          extCl := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName2 );
        }

        var extCl1 : byte;
        extCl1 := 0;
        if ( fpSpAxtf.coTable = coFPSTBUD ) {
          extCl1 := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName1 );
        }

        var extCl3 : byte;
        extCl3 := 0;
        if ( fpSpAxtf.coTable = coFPSTBUD ) {
          extCl3 := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName3 );
        }

        var extCl4 : byte;
        extCl4 := 0;
        if ( fpSpAxtf.coTable = coFPSTBUD ) {
          extCl4 := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName4 );
        }

        var extCl5 : byte;
        extCl5 := 0;
        if ( fpSpAxtf.coTable = coFPSTBUD ) {
          extCl5 := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName5 );
        }

        var extCl6 : byte;
        extCl6 := 0;
        if ( fpSpAxtf.coTable = coFPSTBUD ) {
          extCl6 := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName6 );
        }
        //xlSetCellStringValue(/*fpSpAxtf.levelCode*/fpSpAxtf.code, 1+tt, 1, 1+tt, 1); //
        /*
        xlSetCellStringValue(fpstbud.Name, 1+tt, 2, 1+tt, 2); //
        xlSetCellStringValue(kated.name, 1+tt, 51, 1+tt, 51);
        */

        insert f641_printed set f641_printed.cRec := fpSpAxtf.nRec ,
                                f641_printed.printedAtRow := repGetPrintRow - 1,
                                f641_printed.cNode  := fpSpAxtf.cNode,
                                //f641_printed.code   := firstChar + trimFirst0 (fpstbud.levelcode),
                                f641_printed.code   := code2010,

                                //f641_printed.name   := fpSpAxtf.name,
                                f641_printed.name   := name2010,

                                f641_printed.prior  := fpstbud.prior,
                                f641_printed.SaldoType := extCl,
                                f641_printed.extPar3:= extCl3,
                                f641_printed.extPar4:= extCl4,
                                f641_printed.extPar0[1]:= extCl5,
                                f641_printed.extPar0[2]:= extCl6,
                                f641_printed.isLeaf    := fpSpAxtf.isLeaf ,
                                f641_printed.coTable   := fpSpAxtf.coTable ,
                                f641_printed.AgregHandling := extCl1,
                                f641_printed.isKAUGroup := isKauGroup (fpSpAxtf.nRec)

                                ;
        var cTp: comp;

        isHandable(cTp, fpSpAxtf.nRec);

        ExcelPrint2_2010(fpSpAxtf.coTable,cPlan1,cReg1,1+tt,2,Plan);
        ExcelPrint2_2010(fpSpAxtf.coTable,cPlan2,cReg2,1+tt,14,DopPlan);
        ExcelPrint2_2010(fpSpAxtf.coTable,cFact,cReg3,1+tt,26,Fact);
        ExcelPrint2_2010(fpSpAxtf.coTable,cPlan3,cReg4,1+tt,38,OjidPlan);

        var wasNonZeros : boolean;
        wasNonZeros := false
        for (i := 1; i<=12; i := i +1) {
          if ( abs ( f641_printed.sumvar1[i]) > 0.0000001 or
               abs ( f641_printed.sumvar2[i]) > 0.0000001 or
               abs ( f641_printed.sumvar3[i]) > 0.0000001 or
               abs ( f641_printed.sumvar4[i]) > 0.0000001 or
               abs ( f641_printed.sumvarOtd[i]) > 0.0000001
                ) then {
            wasNonZeros := true
            break;
          }
        }

        if ( not wasNonZeros) then {
          if (not isShowZeros and fpSpAxtf.isLeaf = 1) {
            delete current f641_printed;
            //dec(tt);
            //continue;
          }
        }


        // ExcelPrint2(cPlanOtd,cReg1,1+tt,2, PlanOtd); не надо!

        //xlSetCellStringValue(fpstbud.prior, 1+tt, 52, 1+tt, 52);
        //xlSetCellStringValue(/*fpSpAxtf.levelCode*/fpSpAxtf.code, 1+tt, 1, 1+tt, 1);
        //xlSetCellStringValue(fpstbud.levelcode, 1+tt, 53, 1+tt, 53);
        // вот тут делаем обработку вставки отчета 7ю9ю1 в отчет 6.4.1
      }
    }

    doPreCalcAnalitAggregates;

    var targetPeriod : byte;
    targetPeriod := periodNum + 1;

    var extraSum : double;
    extraSum := 0;


    /*
    _LOOP  fpSpAxtf  {
      if(isValid(tnfpstbud)) { //chek year
        if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) = tsOK ) {
          update current f641_printed set
          f641_printed.sumvar1[targetPeriod] := if (f641_printed.sumvar1[targetPeriod] < f641_printed.sumvarOtd[targetPeriod],
                                                f641_printed.sumvar1[targetPeriod],
                                                f641_printed.sumvarOtd[targetPeriod]
                                                );
          var extCl : byte;
          if ( fpSpAxtf.coTable = coFPSTBUD ) {
            extCl := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName1 );
            if (extCl = 6){
              extraSum := extraSum + f641_printed.sumvar1[targetPeriod];
            }
            if (extCl = 7){
              extraSum := extraSum - f641_printed.sumvar1[targetPeriod];
            }
          }
        }
      }
    }
    _LOOP  fpSpAxtf  {
      if(isValid(tnfpstbud)) { //chek year
        if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) =tsOK ) {
          var extCl : byte;
          if ( fpSpAxtf.coTable = coFPSTBUD ) {
            extCl := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName1 );
            if (extCl = 5){
              update current f641_printed set f641_printed.sumvar1[targetPeriod] := extraSum;
            }
          }
        }
      }
    }
    */

    tt:=0;
    _LOOP  fpSpAxtf  {
      //tt := tt +1;
      if (tt mod visualHeaderPause) = 0 then {
        setVisualHeader (FormatStr_4 ( 'Вывод в Excel | %d из %d | %d | %s',2,stepstotal, tt ,fpSpAxtf.Name));
      }

      if(isValid(tnfpstbud) or 1=1) { //chek year
        // вот тут мы ее закончили
        if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) <> tsOK ) {
          continue;
        };

        inc(tt);
        var i : byte;
        var oj  : double;

        oj := 0;

        For (i := 1; i<=12; inc(i)) {
          //oj += f641_printed.sumvar4[i];
          oj += f641_printed.sumvar1[i];

          /*
          if ( f641_printed.sumvar2[i] = 0 ) {
            update current f641_printed set f641_printed.sumvar2[i] := f641_printed.sumvar2[i];
          };
          */
        }
        update current f641_printed set f641_printed.Sumojid := oj; // 33 колонка - сумма планов

        var godSm : double ;

        godSm := CalcCurrentSumBDSGod (periodNum);
        update current f641_printed set f641_printed.SumBDSGod := godSm;  // 3 колонка - сумма планов и факта

        if (f641_printed.isPrihodSt <=0 ) then {
          if ( periodNum <=10) {
            if (( f641_printed.Sumojid - f641_printed.SumBDSGod) < 0 ){
              // обработаем отрицательную разницу
              if (isUseStPriority and (f641_printed.prior  = 0)) or not isUseStPriority {
                update current f641_printed set
                f641_printed.SumKorr[12]    := f641_printed.Sumojid - f641_printed.SumBDSGod,
                f641_printed.SumKorrStr[12] := '(' +
                                               d2s (f641_printed.Sumojid)+
                                                '-' +
                                               d2s (f641_printed.SumBDSGod) + ')'
                                               ;
              }
            } else {
              // положительная разница
              // таки обрабатываем положительную разницу
              update current f641_printed set
              f641_printed.SumKorr[periodNum+2]    := f641_printed.Sumojid - f641_printed.SumBDSGod,
              f641_printed.SumKorrStr[periodNum+2] := '('
                                                      + d2s (f641_printed.Sumojid)
                                                      + '-'
                                                      + d2s (f641_printed.SumBDSGod) + ')'
              ;
            }
          }
        }

        var extCl : byte;

        extCl := 0;

        if ( fpSpAxtf.coTable = coFPSTBUD ) {
          extCl := GetStBudExtraParameters( coFPSTBUD , fpSpAxtf.CMEAN, extClName );
          update current f641_printed set f641_printed.extPar := extCl;
        }

        //собственно, печатаем в ексель.
        var dataRow : word;

        if ( extCl = 1 ) {
          // строка - разделитель
          dataRow := 15; // для ROW1
        } else if ( extCl = 0 ){
          // простая строка
          dataRow := 19; // для ROW0
        } else if ( extCl = 3 ){
          // строка - разделитель
          dataRow := 21; // для ROW3
        } else if ( extCl = 4 ){
          // строка - разделитель
          dataRow := 25; // для ROW4
        } else if ( extCl = 2 ){
          //extCl := 0;
          //dataRow := 19; // для ROW0
          continue;
        }

        var sSum : String;
        sSum := '=0';

        var sHiddenSum : String;
        sHiddenSum := '=0';

        var bHiddenClmn : byte;
        set bHiddenClmn := 45;
        /*
        xlSetCellStringValue(firstChar + trimFirst0 (fpstbud.levelcode), dataRow, 1, dataRow, 1);
        xlSetCellStringValue(fpSpAxtf.name, dataRow, 2, dataRow, 2); //
        */

        xlSetCellStringValue(firstChar + f641_printed.code, dataRow, 1, dataRow, 1);
        xlSetCellStringValue(f641_printed.name, dataRow, 2, dataRow, 2); //

        if ((extCl = 0) or (extCl = 3) or (extCl = 4)) {
          //xlSetCellNumberValue('''' + f641_printed.Sumojid , dataRow, 71 , dataRow, 71 );
          //xlSetCellNumberValue('''' + f641_printed.SumBDSGod , dataRow, 72 , dataRow, 72 );
          for (i := 1; i<=12; inc(i)) {
            if (i < periodNum) {
              sSum += '+RC[' + ((i-1)*3 +1) + ']';
              sHiddenSum += '+RC[' + (3 + (i-1)*3 +1 - bHiddenClmn) + ']';

              // факт
              xlSetCellNumberValue(f641_printed.sumvar3[i] , dataRow, 3 + (i-1)*3 + 1 , dataRow, 3 + (i-1)* 3 + 1 );

            } else if (i = periodNum) {
              sSum += '+RC[' + ((i-1)*3 +1) + ']';
              sHiddenSum += '+RC[' + (3 + (i-1)*3 +1 - bHiddenClmn) + ']';
              // ожид. факт
              xlSetCellNumberValue(f641_printed.sumvar4[i] , dataRow, 3 + (i-1)*3 + 1 , dataRow, 3 + (i-1)* 3 + 1 );
            } else if (i > periodNum) {
              sSum += '+RC[' + ((i-1)*3 +3) + ']';

              if ( i = (periodNum + 2) ) {
                sHiddenSum += '+RC[-1]';
              } else {
                sHiddenSum += '+RC[' + (3 + (i-1)*3 +3 - bHiddenClmn) + ']';
              }
              // планы, доп. планы и корректировка. ???

              //xlSetCellNumberValue(min (f641_printed.sumvar1[i],f641_printed.sumvar2[i]) , dataRow, 3 + (i-1)*3 + 1 , dataRow, 3 + (i-1)* 3 + 1 );
              xlSetCellNumberValue(  f641_printed.sumvar1[i] ,
                                     dataRow,
                                     3 + (i-1)*3 + 1 ,
                                     dataRow,
                                     3 + (i-1)* 3 + 1
                                     );

              /*
              xlSetCellNumberValue( f641_printed.sumvar2[i] -
                                    min (f641_printed.sumvar1[i],f641_printed.sumvar3[i]) +
                                    f641_printed.SumKorr[i] ,
                                    dataRow, 3 + (i-1)*3 + 2 ,
                                    dataRow, 3 + (i-1)* 3 + 2
                                    ); */
              if ( (f641_printed.SumKorr[i]>0) and (i = periodNum + 2) ) {
                 xlSetCellFormula ( '=' + '' +
                                       d2s (if (f641_printed.sumvar2[i]>0,f641_printed.sumvar2[i],f641_printed.sumvar1[i])) +'-' +
                                       //d2s (f641_printed.sumvar2[i]) +'-' +
                                       d2s (f641_printed.sumvar1[i]) + '+' +
                                       if (f641_printed.SumKorr[i]<>0,f641_printed.SumKorrStr [i],'0') ,
                                       dataRow, 3 + (i-1)*3 + 2 ,
                                       dataRow, 3 + (i-1)* 3 + 2
                                       );
              } else if ( (f641_printed.SumKorr[i]<0) and  (i = 12)) {
                 xlSetCellFormula ( '=' + '' +
                                       d2s (if (f641_printed.sumvar2[i]>0,f641_printed.sumvar2[i],f641_printed.sumvar1[i])) +'-' +
                                       //d2s (f641_printed.sumvar2[i]) +'-' +
                                       d2s (f641_printed.sumvar1[i]) + '+' +
                                       if (f641_printed.SumKorr[i]<>0,f641_printed.SumKorrStr [i],'0') ,
                                       dataRow, 3 + (i-1)*3 + 2 ,
                                       dataRow, 3 + (i-1)* 3 + 2
                                       );
              } else if (i = (periodNum +1)) {
                doPrintCurRowPeriodPlus1 (dataRow,i);
              } else {
                 xlSetCellFormula ( '=' + '' +
                                       d2s (if (f641_printed.sumvar2[i]>0,f641_printed.sumvar2[i],f641_printed.sumvar1[i])) +'-' +
                                       d2s (f641_printed.sumvar1[i]) ,
                                       dataRow, 3 + (i-1)*3 + 2 ,
                                       dataRow, 3 + (i-1)* 3 + 2
                                       );
              }
            }
          }
          xlSetCellFormula(sSum,dataRow,3,dataRow,3);
          xlSetCellFormula(sHiddenSum,dataRow,bHiddenClmn,dataRow,bHiddenClmn);
          xlSetCellFormula('=RC[-2]-RC[2]',dataRow,43,dataRow,43);

          xlSetCellNumberValue(f641_printed.Sumojid , dataRow, 41 , dataRow, 41 );


          if (extCl = 0) {
            xlRunMacro('CopyRow(ROW0)');
          } else if (extCl = 3) {
            xlRunMacro('CopyRow(ROW3)');
          } else if (extCl = 4) {
            xlRunMacro('CopyRow(ROW4)');
          }

        } else if (extCl = 1) {
          xlRunMacro('CopyRow(ROW1)');
        }

        update current f641_printed set f641_printed.printedAtRow := repGetPrintRow - 1;

        if ( f641_printed.SaldoType = 8 ) {
          // Сальдо периода
          rowSaldoPer := f641_printed.printedAtRow;
        }
        if ( f641_printed.SaldoType = 11 ) {
          // Начальное сальдо
          rowSaldoNach := f641_printed.printedAtRow;
        }
        if ( f641_printed.SaldoType = 12 ) {
          // Конечное сальдо
          rowSaldoKon := f641_printed.printedAtRow;
        }

      } else {
      }
    }
    //xlSetCellStringValue(Check, 1, 54, 1, 54);

    //      xlSetCellValue( sGetTune('INSNAME'), 23, 19, 23, 19); //Наименование Инспекции
    //      xlSetCellStringValue( MyOrg.Name, 28, 2, 28, 2);

    printSigners;
    printExecutor;

    xlSetActiveSheetByName(reportSheetName);

    var fSaldoPer : String;

    fSaldoPer := '=СУММ(0';

    tt := 0;
    _LOOP  fpSpAxtf  {
      tt := tt +1;
      if (tt mod visualHeaderPause) = 0 then {
        setVisualHeader (FormatStr_4 ( 'Расчет итогов | %d из %d | %d | %s',3,stepstotal, tt ,fpSpAxtf.Name));
      }
      if(isValid(tnfpstbud) or 1=1) {
        if (getFirst f641_printed where (( fpSpAxtf.nRec==f641_printed.cRec)) <> tsOK ) {
          continue;
        };
        if ( f641_printed.SaldoType = 9 ) {
          // +
          fSaldoPer := fSaldoPer + ';R[-'+ (rowSaldoPer - f641_printed.printedAtRow) + ']C';
        }
        if ( f641_printed.SaldoType = 10 ) {
          // -
          fSaldoPer := fSaldoPer + ';-R[-'+ (rowSaldoPer - f641_printed.printedAtRow) + ']C';
        }
      }
    }

    fSaldoPer := fSaldoPer + ')';


    var raznKN, raznKP, raznNK : word;

    raznKN  := rowSaldoKon - rowSaldoNach;
    raznKP  := rowSaldoKon - rowSaldoPer;
    raznNK  := rowSaldoNach - rowSaldoKon;

    if ( rowSaldoKon <> 0 and rowSaldoNach <> 0 and rowSaldoPer <> 0 ) {
      for (i := 1; i<=12; inc(i)) {
        if (i < periodNum) {
          // konechn
          xlSetCellFormula( '=R[-'+raznKN+']C+R[-'+raznKP+']C',
                            rowSaldoKon,
                            3 + (i-1)*3 + 1,
                            rowSaldoKon,
                            3 + (i-1)*3 + 1
                            );
          if (i <> 1) {
            // не первый период - пишем формулу начального периода
            xlSetCellFormula( '=R[-'+raznNK+']C[-3]',
                              rowSaldoNach,
                              3 + (i-1)*3 + 1,
                              rowSaldoNach,
                              3 + (i-1)*3 + 1
                              );
          }

          //sSum += '+RC[' + ((i-1)*3 +1) + ']';

          // факт
          //xlSetCellNumberValue(f641_printed.sumvar3[i] , dataRow, 3 + (i-1)*3 + 1 , dataRow, 3 + (i-1)* 3 + 1 );

        } else if (i = periodNum) {
          //sSum += '+RC[' + ((i-1)*3 +1) + ']';
          // ожид. факт
          //xlSetCellNumberValue(f641_printed.sumvar4[i] , dataRow, 3 + (i-1)*3 + 1 , dataRow, 3 + (i-1)* 3 + 1 );
          xlSetCellFormula( '=R[-'+raznKN+']C+R[-'+raznKP+']C',
                            rowSaldoKon,
                            3 + (i-1)*3 + 1,
                            rowSaldoKon,
                            3 + (i-1)*3 + 1
                            );
          if (i <> 1) {
            // не первый период - пишем формулу начального периода
            xlSetCellFormula( '=R[-'+raznNK+']C[-3]',
                              rowSaldoNach,
                              3 + (i-1)*3 + 1,
                              rowSaldoNach,
                              3 + (i-1)*3 + 1
                              );
          }

        } else if (i = (periodNum + 1) ) {
          xlSetCellFormula( '=R[-'+raznKN+']C+R[-'+raznKP+']C',
                            rowSaldoKon,
                            3 + (i-1)*3 + 1,
                            rowSaldoKon,
                            3 + (i-1)*3 + 1
                            );
          xlSetCellFormula( '=R[-'+raznKN+']C+R[-'+raznKP+']C',
                            rowSaldoKon,
                            3 + (i-1)*3 + 3,
                            rowSaldoKon,
                            3 + (i-1)*3 + 3
                            );

          xlSetCellFormula( '=R[-'+raznNK+']C[-3]',
                            rowSaldoNach,
                            3 + (i-1)*3 + 1,
                            rowSaldoNach,
                            3 + (i-1)*3 + 1
                            );
          xlSetCellFormula( '=R[-'+raznNK+']C[-5]',
                            rowSaldoNach,
                            3 + (i-1)*3 + 3,
                            rowSaldoNach,
                            3 + (i-1)*3 + 3
                            );
          //rowSaldoPer fSaldoPer
          xlSetCellFormula( fSaldoPer,
                            rowSaldoPer,
                            3 + (i-1)*3 + 1,
                            rowSaldoPer,
                            3 + (i-1)*3 + 1
                            );
          xlSetCellFormula( fSaldoPer,
                            rowSaldoPer,
                            3 + (i-1)*3 + 3,
                            rowSaldoPer,
                            3 + (i-1)*3 + 3
                            );

        } else if (i > periodNum) {
          xlSetCellFormula( '=R[-'+raznKN+']C+R[-'+raznKP+']C',
                            rowSaldoKon,
                            3 + (i-1)*3 + 1,
                            rowSaldoKon,
                            3 + (i-1)*3 + 1
                            );
          xlSetCellFormula( '=R[-'+raznKN+']C+R[-'+raznKP+']C',
                            rowSaldoKon,
                            3 + (i-1)*3 + 3,
                            rowSaldoKon,
                            3 + (i-1)*3 + 3
                            );

          xlSetCellFormula( '=R[-'+raznNK+']C[-3]',
                            rowSaldoNach,
                            3 + (i-1)*3 + 1,
                            rowSaldoNach,
                            3 + (i-1)*3 + 1
                            );
          xlSetCellFormula( '=R[-'+raznNK+']C[-3]',
                            rowSaldoNach,
                            3 + (i-1)*3 + 3,
                            rowSaldoNach,
                            3 + (i-1)*3 + 3
                            );
          //rowSaldoPer fSaldoPer
          xlSetCellFormula( fSaldoPer,
                            rowSaldoPer,
                            3 + (i-1)*3 + 1,
                            rowSaldoPer,
                            3 + (i-1)*3 + 1
                            );
          xlSetCellFormula( fSaldoPer,
                            rowSaldoPer,
                            3 + (i-1)*3 + 3,
                            rowSaldoPer,
                            3 + (i-1)*3 + 3
                            );
        }
      }
    }

    doPrintExtraSum (periodNum);

    update f641_printed where (( 1 == f641_printed.isKAUGroup))
           set f641_printed.isMakeGroup := 1
           ;

    updateIsMakeGroup;
    calculateGroupBorders;
    groupExcelDatas641(0);
    doGroupPrintedData (periodNum);

    doPrintExtraSum641(periodNum);
    doPrintExtraSum641_2(periodNum);
    doPrintExtraSum641_0(periodNum);

    var firstDel : byte;

    firstDel := DeleteColumns(periodNum);
    MarkColumns(periodNum);

    xlRunMacro('AfterPrint641(' + firstDel + ')');
    xlRunMacro('REP_AfterReportPrint641');


    if IsCreateAndKillExcel then {
      xlKillExcel;
    }

    tms[10] := Cur_Time;

    if (isShowTimeLabels) then {
      message ( tms[1] + ''#13'' +
                tms[2] + ''#13'' +
                tms[3] + ''#13'' +
                tms[4] + ''#13'' +
                tms[5] + ''#13'' +
                tms[6] + ''#13'' +
                tms[7] + ''#13'' +
                tms[8] + ''#13'' +
                tms[9] + ''#13'' +
                tms[10] + ''#13''
                )
                ;
    };

  end;

#include iForm641_procint.vip

  procedure handleInit;
  begin
    //Message ('handle init');
    set isShowZeros := true;
    set isDebugDatas := false;
    set isDebugDatas2 := false;
    set isDebugHideClmns := true;
    set coTableToSum := 22217;

    ReadDSK ();

    podpisanty.setprefix('szmn_bud_Form641');
    podpisanty.reinit;

    set visualHeaderPause := 20;

    SetIsCreateAndKillExcel(true);

    isUsing791printed := false;

    set isUseStPriority := false;

    if (getFirst fpTForm = tsOK) {
    }

    /*

    if (not ReadMyDsk(wSetFilt1,'dskSetFilt1',isError))  wsetFilt1 := 0;
    if (not ReadMyDsk(wSetFilt2,'dskSetFilt2',isError))  wsetFilt2 := 0;
    if (not ReadMyDsk(d1,'dsk_d1',isError))  d1 := Add_day(Sub_day(Cur_date,day(cur_Date)),1);
    if (not ReadMyDsk(d2,'dsk_d2',isError))  d2 := Add_day(Sub_day(Cur_date,day(cur_Date)),last_day(Cur_date));

    */
  end;
