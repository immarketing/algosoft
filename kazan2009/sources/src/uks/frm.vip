vipInterface form_6_15 licensed(free);

#include temp_tbl.vpp

interface form_6_15_2 'Отчет по плану строительства' ('', , sci1EscTree), escclose, gray;
show at (,,,)

var
  scale, 
  price_mode, 
  rep_type: word; // тип отчета (0 - ТПиР, 1 - КР)
  tmp, unit: string;
  make_rep: boolean;
  koef: double;
  tcPlan, tcHier, tcVar, tcPer: comp;
  tcVar2 : comp;

create view v01
var cUksTree, 
    cPlanVar,   // Вариант плана
    cPlanVar2,  // Вариант плана для сравнения ("утвержденный план")
    cNode: comp; 
    rep_mode: word;     // Режим получения отчета (0 - план 1 - план/факт)
    xlt_file: string;
as select *
from 
  uksTree, 
  planVar,            // Варианты планов строительства
  planVar planVar2, 
  katVarPl, 
  katVarPl katVarPl2, 
  plStroy, 
  spPlan,
  spPlan spPlan2,
  kated, 
  kated kated2, 
  katstroy, 
  katstroy katstroy2, 
  katstroy prg_tbl, 
  katstroy plan_tree,
  planValue, 
  planValue planValue2,
  fpPeriod, 
  fpTper, 
  fpPeriod fpPeriod2, 
  fpTper   fpTper2, 
  plan_tbl2, 
  obj_tbl (obj_tbl02),
  fpPeriod plPeriod, 
  fpPeriod repPeriod (fpPeriod08),
  
  // algo
  myspplan0, myplanValue0
where ((
      cUksTree                == uksTree.Nrec

  and cPlanVar                == planVar.Nrec
  and planVar.cName           == katVarPl.Nrec
  
  and cPlanVar2               == planVar2.Nrec
  and planVar2.cName          == katVarPl2.Nrec
  
  and uksTree.cDataSource     == plStroy.Nrec

  and plStroy.cPeriod         == plPeriod.Nrec
  and comp(0064000000000017h) == repPeriod.cTper

  and cPlanVar                == spPlan.cPlanVar
  and cNode                   == spPlan.cNode
  and word(2101)              == spplan.wTable
  and word(0)                 == spplan.wKau
  //and comp('013100000000094Eh') == spplan.nRec (noindex) // только для тестирования!!!

  and spPlan.cObject          == katStroy.Nrec
  and katStroy.cEd            == katEd.Nrec 

  //and comp('0131000000166C21h') == planvalue.NRec // только для тестирования!!!
  and word(cgiSpPlan)         == planValue.iMode (noindex)
  and spPlan.Nrec             == planValue.cRec (noindex)
//  and word(cgPlan+cgUse)      == planValue.iRegister
//  and word(cgCurrent+cgTotal) == planValue.iPrice
//  and iArticle                == planValue.iArticle
  and planValue.cPeriod       /== fpPeriod.Nrec
  and fpPeriod.cTper          == fpTper.Nrec
  
  // by algo
  and cPlanVar2               == spPlan2.cPlanVar
  and cNode                   == spPlan2.cNode
  and word(2101)              == spplan2.wTable
  and word(0)                 == spplan2.wKau
  //and comp('0131000000000E85h') == spplan2.nRec (noindex) // только для тестирования!!!
  
  //and comp('0131000000166C21h') == planvalue2.NRec // только для тестирования !!
  and word(cgiSpPlan)         == planValue2.iMode (noindex)
  and spPlan2.Nrec            == planValue2.cRec (noindex)
  and planValue2.cPeriod      /== fpPeriod2.Nrec
  and fpPeriod2.cTper         == fpTper2.Nrec
  
  and spPlan2.cObject         == katStroy2.Nrec
  and katStroy2.cEd           == katEd2.Nrec 
  
))
and (repPeriod.dBeg >= plPeriod.dBeg)
and (repPeriod.dEnd <= plPeriod.dEnd)
bounds _by_obj = obj_tbl.obj == plan_tbl2.obj;

window wRepInfo;
  show at  (0,0,100,30);
  BROWSE  brplan_obj_tbl;
  show at( , , ,5 );
  table obj_tbl;
  Fields
    obj_tbl.obj 'plan_tbl2.obj':[10],protect;
    
    obj_tbl.code		'code':[10],protect;
    obj_tbl.vol		'vol':[10],protect;
    obj_tbl.obj		'obj':[10],protect;
    obj_tbl.node		'node':[10],protect;
    obj_tbl.name		'name':[10],protect;
    obj_tbl.abbr		'abbr':[10],protect;
    obj_tbl.unit		'unit':[10],protect;
  end;
  
  BROWSE  brplan_tbl2;
  show at( ,6 , ,10);
  table plan_tbl2;
  Fields
    plan_tbl2.obj 'plan_tbl2.obj':[10],protect;
    
    plan_tbl2.col		'plan_tbl2.col':[10],protect;
    plan_tbl2.per		'plan_tbl2.per':[10],protect;
    
    plan_tbl2.base_val	'plan_tbl2.base_val':[10],protect;
    plan_tbl2.plan_val	'plan_tbl2.plan_val':[10],protect;
    plan_tbl2.fact_val	'plan_tbl2.fact_val':[10],protect;
    
    plan_tbl2.base_val2	'plan_tbl2.base_val2':[10],protect;
    plan_tbl2.plan_val2	'plan_tbl2.plan_val2':[10],protect;
    plan_tbl2.fact_val2	'plan_tbl2.fact_val2':[10],protect;
  end;
  

  BROWSE  brplan_myspplan;
  show at( ,11 , ,20);
  table myspplan0;
  Fields
    myspplan0.stage 'stage': [10],protect;
    myspplan0.cSpPlan 'cSpPlan': [10],protect;
    
  end;
  
  BROWSE  brplan_myplanValue;
  show at( ,21 , ,29);
  table myplanValue0;
  Fields
    myplanValue0.stage 'myplanValue0.stage':[10],protect;
    myplanValue0.cSpPlan 'cSpPlan':[10],protect;
    myplanValue0.iPrice 'iPrice':[10],protect;
    myplanValue0.iArticle 'iArticle':[10],protect;
    myplanValue0.val 'val':[10],protect;
    myplanValue0.col_no_n 'col_no_n':[10],protect;
    myplanValue0.plValNRec 'plValNRec':[10],protect;
    
  end;
end;


window param_win 'Параметры формирования отчета. v.2' ('', , sci13Esc) gray, escclose;
show at (,,65,20)

screen scr01;
show at (,,64,19)
fields
     uksTree.name: protect, pickbutton;
     
     katVarPl.name: protect, pickbutton;
     katVarPl2.name: protect, pickbutton;
     
     rep_type: [list
                 0 'ТПиР',
                 1 'КР'], protect;
     rep_mode: noprotect;
     repPeriod.name ('Период отчета'): protect, pickbutton;
     price_mode: [list
                 0 'Сумма всего',
                 2 'Сумма без налогов',
                 4 'Сумма налогов',
                 6 'Сумма всего без НДС',
                 8 'Сумма НДС'], protect;
     scale: noprotect;
     xlt_file: noprotect, pickbutton;
buttons
        cmOk,,, 'Формирование отчета...';
        cmCancel,,, 'Отмена формирования';
<<
 `План строительства`
  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Вариант`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Вариант`
`типа план`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 

 `Программа:`.@@@@@@@@@@@@@@@@@  Режим отчета: (.) План            `
                                               (.) План-Факт       `

                                 Период отчета.@@@@@@@@@@@@@@

 `Режим цен:`.@@@@@@@@@@@@@@@@@  Масштаб сумм: (.) в руб.           `
                                               (.) в тыс.руб.       `
 `Шаблон для excel-отчета:`
  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

               <.Формировать.>    <.   Отмена   .>

>>
end; //screen
!--------------------------------------------------------------------------
! Выбор плана
!--------------------------------------------------------------------------
procedure pickPlan;
{
  var fcPlan, fcHier, fcVar : comp;
  fcPlan := plStroy.Nrec;
  fcHier := cUksTree;
  fcVar  := cPlanVar;
  if (runInterface('L_UksPlans::GetPlan',
                    word(cgiPick + cgiNotEdit), fcPlan, fcHier, fcVar) <> cmCancel) {
    
    //Message ('' + string(fcPlan,20,0) + ''#13'' + string(fcHier,20,0) +''#13'' + string(fcVar,20,0) );
    
    set cUksTree := fcHier;
    set cPlanVar := fcVar;
    
    if (year(cur_date) = year(plPeriod.dBeg)) {
     _loop repPeriod {
        if (month(cur_date) = month(repPeriod.dBeg)) break;
      }
    }
    else if (getLast repPeriod <> tsOk)
      message('Нет периодов планирования, соответствующих выбранному плану!', mfWarning + OkButton);
    //if (getFirst uksTree <> tsOK) {};
    //if (getFirst plStroy <> tsOK) {};
  }
}
!--------------------------------------------------------------------------
! Выбор варианта плана
!--------------------------------------------------------------------------
procedure pickPlanVar;
{
  var fcVar : comp;
  fcVar  := cPlanVar;
  
  //Message ('' + string(plStroy.Nrec,20,0) + ''#13'' + string(plStroy.cCO,20,0) +''#13'' + string(plStroy.cPeriod,20,0) );
  
  if runInterface('L_UksPlans::GetVarForPlan', cgiPick,
                  plStroy.Nrec, plStroy.cCO, plStroy.cPeriod, fcVar) <> cmCancel
    set cPlanVar  := fcVar;
}
!--------------------------------------------------------------------------
! Выбор варианта плана 2
!--------------------------------------------------------------------------
procedure pickPlanVar2;
{
  var fcVar : comp;
  fcVar  := cPlanVar2;
  if runInterface('L_UksPlans::GetVarForPlan', cgiPick,
                  plStroy.Nrec, plStroy.cCO, plStroy.cPeriod, fcVar) <> cmCancel
    set cPlanVar2  := fcVar;
}
!--------------------------------------------------------------------------
! Установка видимости полей
!--------------------------------------------------------------------------
procedure set_state;
{
  if (rep_mode = 0) {
    hideLabel4field(#repPeriod.name);
    clearFieldState(#repPeriod.name, sfVisible);
    xlt_file := translatepath('%StartPath%XLS\User_Reports\form615_.xlt')
  }
  else {
    setFieldState(#repPeriod.name, sfVisible);
    showLabel4field(#repPeriod.name);
    xlt_file := translatepath('%StartPath%XLS\User_Reports\form815_.xlt')
  }
}
!--------------------------------------------------------------------------
handleevent // window
cmInit: {
  pickPlan;
  cNode := 0;
  rep_mode := 1;
  rep_type := 0;
  price_mode := cgTotal;
  scale := 1;
  xlt_file := translatepath('%StartPath%XLS\User_Reports\form615_.xlt')
//  set_state;
}
cmOk: {
  make_rep := true;
  koef := 1.0;
  if (scale = 1) koef := 1000.0;
  closewindow(param_win);
}
cmPick: {
  case curfield of
  #uksTree.name: pickPlan;
  #katVarPl.name: pickPlanVar;
  #katVarPl2.name: pickPlanVar2;
  #repPeriod.name: {
    tcPer := repPeriod.Nrec;
    if (runInterface('F_FpCatalog::getPeriod', word(cgiPick), comp(0064000000000017h),
                      comp(0), tcPer, word(0)) = cmDefault)
      if (getFirst repPeriod where ((tcPer == repPeriod.Nrec)) <> tsOk) {}
//runwindowmodal(period_win);
  }
  #xlt_file: {
    tmp := getfilename('*.xlt', 'Выберите файл шаблона отчета');
    if (tmp <> '') {
      xlt_file := tmp;
      rereadrecord;
    }
  }
  end; //case
}
cmExprFieldChanged: set_state;
cmCancel: {}
end;
end; //window

#include fnc.vip

!--------------------------------------------------------------------------
! Формирование отчета
!--------------------------------------------------------------------------
function build_rep: boolean;
begin
  build_rep := false;
  calc_plan;
  runwindowmodal (wRepInfo);
  xl_fill;
  runwindowmodal (wRepInfo);
  build_rep := true;
end;

handleevent // interface
cmInit: {
  make_rep := false;
  runwindowmodal(param_win);
  if make_rep {
    make_rep := build_rep;
  }
  abort;
}
end;
end.
