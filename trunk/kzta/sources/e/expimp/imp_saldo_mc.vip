#component "KZTA"
interface imp_saldo_mc 'Импорт остатков МЦ на складах';
  show at (,,65,7);
  const
    c_zoloto    = 0000000000000007h;
    c_serebro   = 0000000000000003h;
    c_platina   = 0000000000000006h;
    c_palladiy  = 0000000000000005h;
    c_other     = 0001000000000001h;
  end;
  table struct tost (
    mo_code: string[6],
    mt_code: string[22],
    pr_code: string[8],
    pr_id  : string[16],
    mk_date: date,
    kol    : double,
    summa  : double,
    ei_code: string[6],
    cmol   : comp,
    cpodr  : comp,
    cmc    : comp,
    srisp  : word,
    ced    : comp,
    cmaskmc: comp
  ) with index (
    i01 = cpodr + cmol
  );
  table struct tparty (
    pr_code: string[8],
    pr_id  : string[16],
    mt_code: string[22],
    po_date: date,
    vo_code: string[6],
    zol: double,
    ser: double,
    plat: double,
    palad: double,
    other: double
  ) with index (
    i01 = pr_code,
    i02 = pr_id
  );
  table struct tgr (
    cpodr: comp,
    cmol: comp
  ) with index (
    i01 = cpodr + cmol (unique)
  );
  var
    dbfpath: string;
    partypath: string;
    dsaldo: date;
  create view
  as select *
  from tost, tparty, tgr, katmc, katparty, hashan, katmol, kated, katorg, katsopr, spsopr, naldrag, soprhoz,
       tost brost, tparty brparty, katorg brorg
  where ((
    brost.pr_id == brparty.pr_id and
    brparty.vo_code == brorg.code
  ))
  ;
  procedure adddrag(cparty_,cdrag_:comp; kol_:double); {
    clearbuffer(#naldrag);
    naldrag.tidk := 4;
    naldrag.ckatos := cparty_;
    naldrag.ckatdrag := cdrag_;
    naldrag.kol := kol_;
    naldrag.viddrag := 0;
    insert current naldrag;
  }
  procedure DoImport; {
    var i: integer;
    var sum_: double;
    var dend_: date;
    _loop tgr {
      clearbuffer(#katsopr);
      katsopr.name := 'Остатки материалов на '+datetostr(dsaldo,'DD.MM.YYYY');
      katsopr.descr := 'CONV';
      katsopr.vhodnal := 1;
      katsopr.dprice := dsaldo;
      katsopr.dsopr := dsaldo;
      katsopr.yearsopr := year(dsaldo);
      katsopr.nsopr := 'О'+if(GetAnyKau(0, 2, tgr.cpodr),GivenAnName(6), '')+'_'+if(GetAnyKau(0, 60, tgr.cmol),GivenAnName(6), '')+datetostr(dsaldo,'YYYYMMDD');
      katsopr.vidsopr := 611;
      katsopr.cpodrto := tgr.cpodr;
      katsopr.cmolto := tgr.cmol;
      insert current katsopr;
      i := 1;
      sum_ := 0;
      _loop tost where ((tgr.cpodr == tost.cpodr and tgr.cmol == tost.cmol)) {
        clearbuffer(#spsopr);
        spsopr.npp := i;
        spsopr.prmc := 1;
        spsopr.cmcusl := tost.cmc;
        spsopr.kol := tost.kol;
        spsopr.kolopl := spsopr.kol;
        spsopr.price := tost.summa / if(tost.kol>0,tost.kol,1);
        spsopr.csopr := katsopr.nrec;
        spsopr.dsopr := katsopr.dsopr;
        spsopr.vidsopr := katsopr.vidsopr;
        spsopr.kolfact := spsopr.kol;
        spsopr.rprice := spsopr.price;
        if getfirst katparty where ((tost.cmc == katparty.cmc and 0 == katparty.kons and tost.pr_code == katparty.kod)) <> tsOk {
          if getfirst tparty where ((tost.pr_id == tparty.pr_id)) = tsOk {
            clearbuffer(#katparty);
            katparty.kod := tparty.pr_code;
            katparty.name := katparty.kod;
            katparty.createdatetime := tparty.po_date;
            if tost.cmaskmc = 0001000000000002h {
              dend_ := add_months(tparty.po_date, if(tost.srisp>0,tost.srisp,22));
              if (tost.srisp>0) or (tost.srisp=0 and dsaldo<dend_)
                katparty.godendatetime := dend_;
            }
            katparty.kons := 0;
            katparty.cmc := tost.cmc;
            katparty.corgpar := if(getfirst katorg where ((tparty.vo_code == katorg.code)) = tsOk, katorg.nrec, 0);
            insert current katparty;
            if (tparty.zol>0)   adddrag(katparty.nrec, c_zoloto, tparty.zol);
            if (tparty.ser>0)   adddrag(katparty.nrec, c_serebro, tparty.ser);
            if (tparty.plat>0)  adddrag(katparty.nrec, c_platina, tparty.plat);
            if (tparty.palad>0) adddrag(katparty.nrec, c_palladiy, tparty.palad);
            if (tparty.other>0) adddrag(katparty.nrec, c_other, tparty.other);
          }
        }
        spsopr.cparty := katparty.nrec;
        insert current spsopr;
        sum_ := sum_ + tost.summa;
        inc(i);
      }
      update current katsopr set katsopr.summa := sum_;
      clearbuffer(#soprhoz);
      soprhoz.tidkbase := 0;
      soprhoz.datob    := katsopr.dsopr;
      soprhoz.csoprdoc := katsopr.nrec;
      soprhoz.tipdoc   := katsopr.vidsopr;
      soprhoz.tidkgal  := katsopr.vidsopr;
      soprhoz.nodoc    := katsopr.nsopr;
      soprhoz.descr    := katsopr.descr;
      soprhoz.desgr    := katsopr.desgr;
      soprhoz.summa    := katsopr.summa;
      soprhoz.vhsumhoz := '+';
      insert current soprhoz;
    }
  }
  window winfo 'Загруженные данные';
    screen scinfo;
      show at (,,,3);
      buttons
        cmImport;
<<
  <. Импортировать .>
>>
    end;
    browse brinfo;
      show at (,4,,);
      table brost;
      fields
        if(GetAnyKau(0, 4, brost.cmc), GivenAnName(1), '') 'МЦ': [30], protect;
        if(GetAnyKau(0, 2, brost.cpodr), GivenAnName(1), '') 'Подр.': [10], protect;
        if(GetAnyKau(0, 60, brost.cpodr), GivenAnName(1), '') 'МОЛ': [10], protect;
        brparty.pr_code 'Партия': [10], protect;
        if(GetAnyKau(1, 1, brorg.nrec), GivenAnName(1), brparty.vo_code) 'Орг': [10], protect;
        brost.mk_date 'Дата изготовления':[10], protect;
        brost.srisp 'Срок использ':[5], protect;
        brost.kol 'Количество': [8,4], protect;
        brost.summa 'Сумма': [8,2], protect;
        brost.ei_code 'Код ед изм': [2], protect;
    end;
    handleevent
      cmImport: {
        DoImport;
      }
    end;
  end;
  screen scmain;
    fields
      dsaldo: noprotect;
      dbfpath: noprotect, pickbutton;
      partypath: noprotect, pickbutton;
    buttons
      cmLoad;
<<

`Дата сальдо` .@@@@@@@@@@
`Путь к файлу с остатками` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Путь к файлу с партиями`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                                
                                                <. Продолжить .>
>>
  end;
  procedure load_dbf; {
    var l: longint;
    setvisualheader(dbfpath);
    delete all tost;
    l := dbfopen(dbfpath, stopen);
    if dbfgetfirst(l) = 0 then do {
      clearbuffer(#tost);
      tost.mt_code := trim(dbfgetfieldvalue(l, 'mt_code'));
      if (getfirst katmc where ((tost.mt_code == katmc.barkod)) = tsOk) {
        tost.cmc := katmc.nrec ;
        tost.cmaskmc := katmc.cmaskmc;
        if katmc.cmaskmc = 0001000000000002h { //для ПКИ определить срок использования
          if getfirst hashan where ((katmc.chashan == hashan.nrec)) = tsOk {
            tost.srisp := if(GetAnyKau(0, 1022, hashan.canalit[6]), GivenAnName(1), 22);
            //if (tost.srisp = 0) tost.srisp := 22;
          }
        }
      } else continue;
      tost.mo_code := trim(dbfgetfieldvalue(l, 'mo_code'));
      if (getfirst katmol where ((tost.mo_code == katmol.kod)) = tsOk) {
        tost.cmol  := katmol.nrec;
        tost.cpodr := katmol.cskl;
      }
      tost.pr_code := trim(dbfgetfieldvalue(l, 'pr_code'));
      tost.pr_id   := trim(dbfgetfieldvalue(l, 'pr_id'));
      tost.mk_date := strtodate(trim(dbfgetfieldvalue(l, '_make_data')),'YYYYMMDD');
      tost.kol     := trim(dbfgetfieldvalue(l, 'base_col'));
      tost.summa   := trim(dbfgetfieldvalue(l, 'balc_summa'));
      tost.ei_code := trim(dbfgetfieldvalue(l, 'se_ei_code'));
      if (getfirst kated where ((tost.ei_code == kated.kod)) = tsOk) tost.ced := kated.nrec;
      insert current tost;
    } while dbfgetnext(l) = 0;
    dbfclose(l);
    
    setvisualheader(partypath);
    delete all tparty;
    l := dbfopen(partypath, stopen);
    if dbfgetfirst(l) = 0 then do {
      clearbuffer(#tparty);
      tparty.pr_id   := trim(dbfgetfieldvalue(l, 'pr_id'));
      tparty.pr_code := trim(dbfgetfieldvalue(l, 'pr_code'));
      tparty.mt_code := trim(dbfgetfieldvalue(l, 'mt_code'));
      tparty.po_date := strtodate(trim(dbfgetfieldvalue(l, 'po_date')),'YYYYMMDD');
      tparty.vo_code := trim(dbfgetfieldvalue(l, 'vo_code'));
      tparty.zol     := trim(dbfgetfieldvalue(l, 'zol'));
      tparty.ser     := trim(dbfgetfieldvalue(l, 'ser'));
      tparty.plat    := trim(dbfgetfieldvalue(l, 'plat'));
      tparty.palad   := trim(dbfgetfieldvalue(l, 'palad'));
      tparty.other   := trim(dbfgetfieldvalue(l, 'other'));
      insert current tparty;
    } while dbfgetnext(l) = 0;
    dbfclose(l);
    setvisualheader('Группировка по подразделениям и МОЛ');
    delete all tgr;
    insert tgr(cpodr, cmol)
    select tost.cpodr, tost.cmol
    from tost
    ignore_errors(tsduplicatekey);
  }
  handleevent
    cmPick: {
      case curfield of
        #dbfpath: {
          dbfpath := GetFileName('*.dbf','Выбор файла с остатками МЦ');
        }
        #partypath: {
          partypath := GetFileName('*.dbf','Выбор файла с партиями МЦ');
        }
      end;
      rereadrecord;
    }
    cmLoad: {
      startnewvisual(vtRotateVisual, vftimer+vfbreak, 'Загрузка dbf', 0);
      load_dbf;
      stopvisual('', 0);
      runwindowmodal(winfo);
    }
    cmInit: {
      if not readmydsk(dbfpath, 'impsaldomc_dbfpath', false) then dbfpath := '';
      if not readmydsk(partypath, 'impsaldomc_partypath', false) then partypath := '';
    }
    cmDone: {
      savemydsk(dbfpath, 'impsaldomc_dbfpath');
      savemydsk(partypath, 'impsaldomc_partypath');
    }
  end;
end.